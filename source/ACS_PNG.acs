//#pragma fixed on

//#include "zcommon.acs"

//virtual resolution of the game
#define SCREENWIDTH     320
#define SCREENHEIGHT    200



/* =========== */

function int abs (int x)
{
    if (x < 0)
        return -x;

    return x;
}

function fixed fabs (fixed x)
{
	if (x < 0)
		return -x;
	return x;
}

function void ServeBall(int pl, int from)
{
	//TODO: Maybe shouldn't center ball
	bally[pl] = (GAMEFIELDEND-GAMEFIELDSTART) / 2 + (GAMEFIELDSTART);
	ballx[pl] = (GAMEFIELDRIGHT - GAMEFIELDLEFT) / 2 + (GAMEFIELDLEFT);
	
	//launch ball at a random ang
	fixed ang = RandomFixed(-0.15, 0.15);
	
	//find initial velocity
	velx[pl] = VELOCITY * cos(ang);
	vely[pl] = VELOCITY * sin(ang);
	
	if (from == 1)
	{
		ballx[pl] = (GAMEFIELDRIGHT - GAMEFIELDLEFT) * .75 + (GAMEFIELDLEFT);
		velx[pl] *= -1;
	}
	else if (from == 2)
	{
		ballx[pl] = (GAMEFIELDRIGHT - GAMEFIELDLEFT) * .25 + (GAMEFIELDLEFT);
	}
	else
	{		
		if (random(0, 1) == 1)
		{
			velx[pl] *= -1;
		}
	}
}


function ballmove TestPaddle(ballmove move)
{
	ballmove result;
	//print(s:"TestPaddle ",f:move.x,s:" ",f:move.y,s:" ",f:move.velx,s:" ",f:move.vely);
	if (move.x >= LEFTPADDLE && (move.x + move.velx) < LEFTPADDLE) //moving left
	{		
		//figure out how far to the plane
		fixed diff = LEFTPADDLE - (move.x + move.velx);
		fixed clipvel = move.velx + diff;
		fixed xproportion = fabs(clipvel / move.velx);
		
		if (xproportion < 0 || xproportion > 1)
		{
			print(s:"TestPaddle: bad xproportion ",f:xproportion);
			result.angle = -1;
			errorbit = true;
			return result;
		}
		
		//figure out where on the y axis this puts us
		
		//fixed xdest = LEFTPADDLE;
		fixed xdest = move.x + (move.velx * xproportion);
		fixed ydest = move.y + (move.vely * xproportion);
		
		//print(f:xdest,s:" ",f:ydest);
		
		//check the paddle
		if (ydest >= (paddle1y[PlayerNumber()] - BALLSIZE)
			&& ydest <= (paddle1y[PlayerNumber()] + PADDLEHEIGHT))
		{
			//find the new angle
			fixed hitlocation = ydest - (paddle1y[PlayerNumber()]);
			fixed max = PADDLEHEIGHT;
			
			//cap for convenience
			if (hitlocation < 0)
			{
				hitlocation = 0;
			}
			if (hitlocation > PADDLEHEIGHT)
			{
				hitlocation = PADDLEHEIGHT;
			}
			
			fixed angle = (max - hitlocation) / PADDLEHEIGHT;
			angle -= 0.5; angle *= -0.25;
			
			//print(f:angle);
			
			fixed vel = VectorLength(move.velx - clipvel, move.vely - (move.vely * xproportion));
			
			result.angle = angle;
			result.x = xdest;
			result.y = ydest;
			result.velx = vel * cos(angle);
			result.vely = vel * sin(angle);
			
			//result.velx = -(move.velx + clipvel);
			//result.vely = move.vely - (move.vely * xproportion);
			//result.angle = VectorAngle(-move.velx, move.vely);
			
			if (result.velx <= 0)
			{
				print(s:"Bad velx from paddle hit ",f:clipvel,s:" ",f:diff,s:" ",f:xproportion,s:" ",f:move.velx);
				errorbit = true;
			}
			
			//print(s:"final vel ",f:result.velx,s:" ",f:result.vely);
			
			return result;
		}
	}
	
	else if (move.x <= (RIGHTPADDLE - BALLSIZE) && (move.x + move.velx) >= (RIGHTPADDLE - BALLSIZE))
	{
		
		//figure out how far to the plane
		fixed diff = (move.x + move.velx) - (RIGHTPADDLE - BALLSIZE);
		fixed clipvel = move.velx - diff;
		fixed xproportion = fabs(clipvel / move.velx);
		
		if (xproportion < 0 || xproportion > 1)
		{
			print(s:"TestPaddle: bad xproportion ",f:xproportion);
			result.angle = -1;
			errorbit = true;
			return result;
		}
		
		//figure out where on the y axis this puts us
		
		fixed xdest = RIGHTPADDLE - BALLSIZE - 1;
		fixed ydest = move.y + (move.vely * xproportion);
		
		//print(f:xdest,s:" ",f:ydest);
		
		//check the paddle
		if (ydest >= (paddle2y[PlayerNumber()] - BALLSIZE)
			&& ydest <= (paddle2y[PlayerNumber()] + PADDLEHEIGHT))
		{
			//find the new angle
			fixed hitlocation = ydest - (paddle2y[PlayerNumber()]);
			fixed max = PADDLEHEIGHT;
			
			//cap for convenience
			if (hitlocation < 0)
			{
				hitlocation = 0;
			}
			if (hitlocation > PADDLEHEIGHT)
			{
				hitlocation = PADDLEHEIGHT;
			}
			
			fixed angle = (max - hitlocation) / PADDLEHEIGHT;
			angle -= 0.5; angle *= 0.25;
			
			//flip angle
			angle += 0.5;
			
			fixed vel = VectorLength(move.velx - clipvel, move.vely - (move.vely * xproportion));
			
			result.angle = angle;
			result.x = xdest;
			result.y = ydest;
			result.velx = vel * cos(angle);
			result.vely = vel* sin(angle);
			
			//result.velx = -(move.velx - clipvel);
			//result.vely = move.vely - (move.vely * xproportion);
			//result.angle = VectorAngle(result.velx, result.vely);
			
			//this condition should never occur, so of course ie keeps on going on
			if (result.velx >= 0)
			{
				print(s:"Bad velx from paddle hit ",f:clipvel,s:" ",f:diff,s:" ",f:xproportion,s:" ",f:move.velx);
				errorbit = true;
			}
			
			return result;
		}
	}
	
	result.angle = -1;
	return result;
}

function ballmove TestPlane(ballmove move)
{
	ballmove result;
	if (move.y >= GAMEFIELDSTART && (move.y+move.vely) < GAMEFIELDSTART) //check ceiling
	{
		fixed diff = GAMEFIELDSTART - (move.y + move.vely);
		fixed clipvel = move.vely + diff;
		fixed yproportion = fabs(clipvel / move.vely);
		
		if (yproportion < 0 || yproportion > 1)
		{
			print(s:"TestPlane: bad yproportion ",f:yproportion);
			result.angle = -1;
			result.velx = 0;
			result.vely = 0;
			errorbit = true;
			return result;
		}
		
		fixed ydest = GAMEFIELDSTART;
		fixed xdest = move.x + (move.velx * yproportion);
			
		result.velx = move.velx - (move.velx * yproportion);
		result.vely = -(move.vely - clipvel);
		result.x = xdest;
		result.y = ydest;
		result.angle = VectorAngle(result.velx, result.vely);
		
		return result;
	}
	
	else if (move.y <= (GAMEFIELDEND - BALLSIZE) && (move.y + move.vely) > (GAMEFIELDEND - BALLSIZE))
	{
		fixed diff = (move.y + move.vely) - (GAMEFIELDEND - BALLSIZE);
		fixed clipvel = move.vely - diff;
		fixed yproportion = fabs(clipvel / move.vely);
		
		if (yproportion < 0 || yproportion > 1)
		{
			print(s:"TestPlane: bad yproportion ",f:yproportion);
			result.angle = -1;
			result.velx = 0;
			result.vely = 0;
			errorbit = true;
			return result;
		}
		
		fixed ydest = GAMEFIELDEND - BALLSIZE;
		fixed xdest = move.x + (move.velx * yproportion);
			
		result.velx = move.velx - (move.velx * yproportion);
		result.vely = -(move.vely - clipvel);
		result.x = xdest;
		result.y = ydest;
		result.angle = VectorAngle(result.velx, result.vely);
		
		return result;
	}
}

function ballmove DoMovementStep(ballmove basemove)
{
	fixed basex = basemove.x + basemove.velx;
	fixed basey = basemove.y + basemove.vely;
	
	//print(s:"MovementStep ",f:basemove.x,s:" ",f:basemove.y,s:" ",f:basemove.velx,s:" ",f:basemove.vely,s:" ",f:basemove.angle);
	
	//if we're going to hit something, figure out what it is so we can be sure to process it first
	fixed planeproportion = 0;
	fixed paddleproportion = 0;
	
	//0: no checks needed, 1: check plane, 2: check paddles
	int checkwhat = 0;
	
	//check planes
	if (basemove.y >= GAMEFIELDSTART && basey < GAMEFIELDSTART) //check ceiling
	{
		fixed clip = GAMEFIELDSTART - basey;
		fixed clipvel = basemove.vely + clip;
		planeproportion = fabs(clipvel / basemove.vely);
		PDA_PlaySound("PDA/Pong/WallBounce", "pda/soldierpong", 80);
	}
	else if (basemove.y <= (GAMEFIELDEND - BALLSIZE) && basey > (GAMEFIELDEND - BALLSIZE))
	{
		fixed clip = basey - (GAMEFIELDEND - BALLSIZE);
		fixed clipvel = basemove.vely - clip;
		planeproportion = fabs(clipvel / basemove.vely);
		PDA_PlaySound("PDA/Pong/WallBounce", "pda/soldierpong", 80);
	}
	//check if we got a bad proporotion
	if (planeproportion < 0 || planeproportion > 1)
	{
		print(s:"Invalid plane proprotion calculated!");
		errorbit = true;
		planeproportion = 0;
	}
	
	//check paddles
	//paddles are a two step check since they may or may not actually hit
	if (basemove.x >= LEFTPADDLE && basex < LEFTPADDLE) //check left paddle
	{
		fixed clip = LEFTPADDLE - basex;
		fixed clipvel = basemove.velx + clip;
		paddleproportion = fabs(clipvel / basemove.velx);
		PDA_PlaySound("PDA/Pong/PaddleBounce", "pda/soldierpong", 80);
	}
	else if (basemove.x <= (RIGHTPADDLE - BALLSIZE) && basex > (RIGHTPADDLE - BALLSIZE)) //check right
	{
		fixed clip = basex - (RIGHTPADDLE - BALLSIZE);
		fixed clipvel = basemove.velx - clip;
		paddleproportion = fabs(clipvel / basemove.velx);
		PDA_PlaySound("PDA/Pong/PaddleBounce", "pda/soldierpong", 80);
	}
	
	if (paddleproportion < 0 || paddleproportion > 1)
	{
		print(s:"Invalid paddle proprotion calculated! ", f:paddleproportion);
		errorbit = true;
		paddleproportion = 0;
	}
	
	//check if we're going to need to care about both
	//ultimately at each step we only care about one
	if (paddleproportion && planeproportion)
	{
		//print(s:"trying to do a double move");
		//Find what we penetrated the least with our velocity
		//as this is the first thing you find
		checkwhat = 1;
		if (paddleproportion < planeproportion)
		{
			checkwhat = 2;
		}
	}
	//check paddle
	else if (paddleproportion)
	{
		checkwhat = 2;
	}
	//check plane
	else if (planeproportion)
	{
		checkwhat = 1;
	}
	
	//print(s:"testing condition ",i:checkwhat);
	
	//actually do the paddle test first. This is because the paddle test might fail
	if (checkwhat == 2)
	{
		ballmove result;
		result = TestPaddle(basemove);
		//terrible test code but w/e
		if (result.angle != -1)
		{
			//we're set, so just return what we got
			//print(s:"did paddle bounce");
			return result;
		}
		//test if we'd hit the plane if we kept on going
		else if (planeproportion)
		{
			checkwhat = 1;
		}
		else
		{
			checkwhat = 0;
		}
	}
	
	if (checkwhat == 1)
	{
		//print(s:"went in with angle ",f:basemove.angle);
		ballmove result = TestPlane(basemove);
		//a plane hit will always work
		//print("did plane bounce");
		//print(s:"came out with angle ",f:result.angle);
		return result;
	}
	
	if (checkwhat == 0)
	{
		//can just move
		ballmove result;
		result.x = basex;
		result.y = basey;
		result.velx = 0;
		result.vely = 0;
		result.angle = basemove.angle;
		//print("did plain move");
		return result;
	}
}

function fixed PaddleControl(int pl)
{
	fixed pitchchange = -GetPlayerInputFixed(pl, INPUT_PITCH);

    bool inverted;
    if(GameType() == GAME_SINGLE_PLAYER)
        inverted = GetCVar("invertmouse");
	
	pitchchange *= MAXPADDLESPEED * MOUSESEN;
	
	int buttons = GetPlayerInput(pl, INPUT_BUTTONS);
	
	//find a move
	fixed pmove;

    if(inverted)
        pmove -= pitchchange;
    else
        pmove += pitchchange;
        
	if (buttons & BT_BACK)
	{
		pmove += MAXPADDLESPEED / 2.0;
	}
	if (buttons & BT_FORWARD)
	{
		pmove -= MAXPADDLESPEED / 2.0;
	}
	
	if (pmove > MAXPADDLESPEED)
	{
		pmove = MAXPADDLESPEED;
	}
	else if (pmove < -MAXPADDLESPEED)
	{
		pmove = -MAXPADDLESPEED;
	}
	
	//print(f:pmove);
	return pmove;
}

function fixed AI(void)
{
	//moving away from us
	int pl = PlayerNumber();
	if (velx[pl] < 0)
	{
		return 0.0;
	}
	
	//fixed jitter = RandomFixed(0, MAXPADDLESPEED / 4);
	
	if (currentAITargTime[pl] == 0)
	{
		currentAITargTime[pl] = random(LOWREACTIONTIME, HIGHREACTIONTIME);
		//project and find where Y will be
		fixed xproportion = RIGHTPADDLE / ballx[pl];
		currentAITarget[pl] = bally[pl] + (vely[pl] * xproportion);
	}
	else
	{
		currentAITargTime[pl]--;
	}
	
	//need to move up
	if (paddle2y[pl] > currentAITarget[pl])
	{
		return -MAXPADDLESPEED / 2.0;
	}
	
	//need to move down
	if ((paddle2y[pl] + PADDLEHEIGHT) < currentAITarget[pl])
	{
		return MAXPADDLESPEED / 2.0;
	}
	
	return 0.0;
}

/* =========== */

script "PongMPInit" OPEN
{
	for (int i = 0; i < MAX_PLAYERS; i++)
	{
		myChallenge[i] = -1;
		mpChallenges[i] = -1;
		mpPlayer1[i] = -1;
		mpPlayer2[i] = -1;
	}
}

//Issue a challenge to an opponent
script "IssueChallenge" (int challengeTo)
{
	int pl = PlayerNumber();
	
	if (challengeTo != pl)
	{
		if (myChallenge[pl] != -1)
		{
			print(s:"You already have a challenge!");
		}
		else if (mpChallenges[challengeTo] != -1)
		{
			print(s:"This user already has a challenge!");
		}
		else if (mpPlayer2[challengeTo] != -1 || mpPlayer1[challengeTo] != -1)
		{
			print(s:"This user is already in game!");
		}
		else
		{
			mpChallenges[challengeTo] = pl;
			myChallenge[pl] = challengeTo;
		}
	}
}

//Cancel your own challenge
script "RevokeChallenge" (void)
{
	int pl = PlayerNumber();
	mpChallenges[myChallenge[pl]] = -1;
	myChallenge[pl] = -1;
}

//Reject the enemy challenge
script "RejectChallenge" (void)
{
	int pl = PlayerNumber();
	myChallenge[mpChallenges[pl]] = -1;
	mpChallenges[pl] = -1;
}

//Accept the enemy challenge
script "AcceptChallenge" (void)
{
	int pl = PlayerNumber();
	int hostpl = mpChallenges[pl];
	
	if (hostpl == -1)
	{
		print(s:"No challenge sent!");
		terminate;
	}
	
	//Set the player IDs
	mpPlayer1[hostpl] = pl;
	mpPlayer2[pl] = hostpl;
	
	mpChallenges[pl] = -1;
	myChallenge[hostpl] = -1;
	
	//Start the game in the context of the host
	SetActivator(0, playernumtoconst[hostpl]);
	ACS_NamedExecuteAlways("PongInit", 0, pl);
}

//run from the context of a player
script "PongInit" (void)
{
	errorbit = false;
	int pl = PlayerNumber();
	int guestpl = mpPlayer1[pl];
	//set default positions
	ServeBall(pl, 0);
		
	//velx[pl] = -3.7;
	//vely[pl] = 0;
	
	//set paddles
	paddle1y[pl] = random(GAMEFIELDSTART+8, GAMEFIELDEND-PADDLEHEIGHT-8);
	paddle2y[pl] = random(GAMEFIELDSTART+8, GAMEFIELDEND-PADDLEHEIGHT-8);
	
	//start host gameloop
    PDA_Wipe();
    PDA_Local.page = 6;
	ACS_NamedExecuteAlways("PongLoop", 0, guestpl);
	SetPlayerProperty(false, true, PROP_TOTALLYFROZEN);
	
	if (guestpl != -1)
	{
		//start guest client
		SetActivator(0, playernumtoconst[guestpl]);
		ACS_NamedExecuteAlways("PongClient", 0);
		SetPlayerProperty(false, true, PROP_TOTALLYFROZEN);
	}
	//Set a fake id to indicate we're in single player otherwise
	else
	{
		mpPlayer1[pl] = pl;
	}
}

//Disconnect script to quit pong
script "DisconnectQuitPong" (int pl) DISCONNECT
{
	//were we a host?
	if (mpPlayer1[pl] != -1)
	{
		//inform the guest just in case
		quitMode[pl] = 1;
	}
	//were we a guest
	if (mpPlayer2[pl] != -1)
	{
		//inform host
		quitMode[mpPlayer2[pl]] = 2;
	}
    PDA_Wipe();
    PDA_NOPONG();
    PDA_Local.page = 1;
}

//Quit Pong. This stops the script and gives the reason for quitting
script "QuitPong" (void)
{
    int pl = PlayerNumber();
    if(PDA_Local.category == PDA_PONG)
    {
        //are we a host?
        if (mpPlayer1[pl] != -1)
        {
            //inform ourself
            //print("host quit"); //Reserved for when MP Pong is going to work. At the moment..
            quitMode[pl] = 1;
        }
        //are we a guest
        if (mpPlayer2[pl] != -1)
        {
            //inform host
            //print("guest quit");
            quitMode[mpPlayer2[pl]] = 2;
        }
        PDA_Wipe();
        PDA_NOPONG();
        PDA_Local.page = 1;
        PDA_Local.pongrunning = false;
        HudMessage(s:"\n"; HUDMSG_PLAIN, PDA_PONG_TOPBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectY + 19.0, 0.0);
        HudMessage(s:"\n"; HUDMSG_PLAIN, PDA_PONG_BOTBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectHeight - 0.0, 0.0);
    }
}

//This is a visual only form of the pong game, used for the MP mode
//Handles player input for the client --UNDONE--
script "PongClient" (void)
{
	while (true)
	{
		int pl = PlayerNumber();
		int hostpl = mpPlayer2[pl];
		
		//Quit game. Handle our other player ID
		//host quit
		if (quitMode[hostpl] == 1)
		{
			//print(s:"Host has left the game!");
			mpPlayer2[pl] = -1;
            PDA_Wipe();
            PDA_NOPONG();
            PDA_Local.page = 1;
            HudMessage(s:"\n"; HUDMSG_PLAIN, PDA_PONG_TOPBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectY + 19.0, 0.0);
            HudMessage(s:"\n"; HUDMSG_PLAIN, PDA_PONG_BOTBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectHeight - 0.0, 0.0);
			terminate;
		}
		//guest quit
		else if (quitMode[hostpl] == 2)
		{
			mpPlayer2[pl] = -1;
            PDA_Wipe();
            PDA_NOPONG();
            PDA_Local.page = 1;
            HudMessage(s:"\n"; HUDMSG_PLAIN, PDA_PONG_TOPBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectY + 19.0, 0.0);
            HudMessage(s:"\n"; HUDMSG_PLAIN, PDA_PONG_BOTBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectHeight - 0.0, 0.0);
			terminate;
		}
		
		//mpMove[pl] = PaddleControl();
		
		fixed p1y = paddle1y[hostpl];
		fixed p2y = paddle2y[hostpl];
		fixed bx = ballx[hostpl];
		fixed by = bally[hostpl];
		
		SetHudSize(SCREENWIDTH, SCREENHEIGHT, true);
		SetFont("PADDLE");
		fixed drawx = (LEFTPADDLEDRAW) + 0.1;
		fixed drawy = ((int)p1y) + 0.1;
		HudMessage(s:"A"; HUDMSG_PLAIN, PDA_PONG_LEFTPADDLE, CR_UNTRANSLATED, drawx, drawy, 0.0);
		
		drawx = (RIGHTPADDLE) + 0.1;
		drawy = ((int)p2y) + 0.1;
		HudMessage(s:"A"; HUDMSG_PLAIN, PDA_PONG_RIGHTPADDLE, CR_UNTRANSLATED, drawx, drawy, 0.0);
		
		SetFont("BALL");
		//gross hack, truncate decimal place
		drawx = (int)bx + 0.1;
		drawy = (int)by + 0.1;
		HudMessage(s:"A"; HUDMSG_PLAIN, PDA_PONG_BALL, CR_UNTRANSLATED, drawx, drawy, 0.0);
		
		//draw the score
		
		SetFont("STAT_MNO");
		drawy = SCORELINE;
        
        HudMessage(scoreboard,
        (p1score[pl] > p2score[pl]) ? "\cf" : "\c-", p1score[pl],
        (p2score[pl] > p1score[pl]) ? "\cf" : "\c-", p2score[pl]; HUDMSG_PLAIN, PDA_PONG_PLAYERSCORE, CR_UNTRANSLATED, PDA_RectX + 50.1, drawy, 0.0);
        
        SetFont("PBORD");
        HudMessage(s:"A"; HUDMSG_PLAIN, PDA_PONG_TOPBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectY + 19.0, 0.0);
        HudMessage(s:"A"; HUDMSG_PLAIN, PDA_PONG_BOTBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectHeight - 0.0, 0.0);
		SetFont("");
		
		delay(1);
	}
}

//The PDA integration will probably have to be rethought some for this...
//This is the pong server. This actually does all the game logic
script "PongLoop" (int mpPartner)
{
	int pl = PlayerNumber();
	while (true)
	{
		//Quit game. Handle our other player ID
		//host quit
		if (quitMode[pl] == 1)
		{
			mpPlayer1[pl] = -1;
            PDA_Wipe();
            PDA_NOPONG();
            PDA_Local.page = 1;
            HudMessage(s:"\n"; HUDMSG_PLAIN, PDA_PONG_TOPBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectY + 19.0, 0.0);
            HudMessage(s:"\n"; HUDMSG_PLAIN, PDA_PONG_BOTBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectHeight - 0.0, 0.0);
            quitMode[pl] = -1;
			terminate;
		}
		//guest quit
		else if (quitMode[pl] == 2)
		{
			//print(s:"Guest has left the game!");
			mpPlayer1[pl] = -1;
            PDA_Wipe();
            PDA_NOPONG();
            PDA_Local.page = 1;
            HudMessage(s:"\n"; HUDMSG_PLAIN, PDA_PONG_TOPBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectY + 19.0, 0.0);
            HudMessage(s:"\n"; HUDMSG_PLAIN, PDA_PONG_BOTBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectHeight - 0.0, 0.0);
            quitMode[pl] = -1;
			terminate;
		}
		
		if (mpPartner == -1)
		{
			paddle1y[pl] += PaddleControl(pl);
			paddle2y[pl] += AI();
		}
		else
		{
			paddle1y[pl] += PaddleControl(pl);
			paddle2y[pl] += PaddleControl(mpPartner);
		}
		
		if (paddle1y[pl] > (GAMEFIELDEND-PADDLEHEIGHT))
		{
			paddle1y[pl] = (GAMEFIELDEND-PADDLEHEIGHT);
		}
		if (paddle1y[pl] < GAMEFIELDSTART)
		{
			paddle1y[pl] = GAMEFIELDSTART;
		}
		
		if (paddle2y[pl] > (GAMEFIELDEND-PADDLEHEIGHT))
		{
			paddle2y[pl] = (GAMEFIELDEND-PADDLEHEIGHT);
		}
		if (paddle2y[pl] < GAMEFIELDSTART)
		{
			paddle2y[pl] = GAMEFIELDSTART;
		}
		
		//paddle2y[pl] = (bally[pl]) + (vely[pl]) - random(0, PADDLEHEIGHT);
		//paddle1y[pl] = paddle2y[pl];
		
		//determine where the ball will end up if it doesn't hit anything
		
		ballmove move;
		move.x = ballx[pl];
		move.y = bally[pl];
		move.velx = velx[pl];
		move.vely = vely[pl];
		move.angle = VectorAngle(move.velx, move.vely);
		
		//print(s:"start move ",f:move.x,s:" ",f:move.y,s:" ",f:move.velx,s:" ",f:move.vely,s:" ",f:move.angle);
		
		////print(s:"starting move");
		while (move.velx != 0 || move.vely != 0)
		{
			move = DoMovementStep(move);
		}
		
		if (errorbit)
		{
			print(s:"Error condition detected. terminating");
			errorbit = false;
			terminate;
		}
		
		bally[pl] = move.y; ballx[pl] = move.x;
		velx[pl] = VELOCITY * cos(move.angle);
		vely[pl] = VELOCITY * sin(move.angle);
		
		if (ballx[pl] < GAMEFIELDLEFT)
		{
			p2score[pl]++;
			ServeBall(pl, 2);
			PDA_PlaySound("PDA/Pong/P2Score", "pda/soldierpong", 80);
		}
		else if (ballx[pl] > GAMEFIELDRIGHT)
		{
			p1score[pl]++;
			ServeBall(pl, 1);
			PDA_PlaySound("PDA/Pong/P1Score", "pda/soldierpong", 80);
		}
		
		//print(s:"end move ",f:ballx[pl],s:" ",f:bally[pl],s:" ",f:velx[pl],s:" ",f:vely[pl]);

		if (bally[pl] < GAMEFIELDSTART || bally[pl] > GAMEFIELDEND)
		{
			print(s:"ball in insane y ", f:bally[pl]);
			terminate;
		}
		
		//Draw playfield
        
		SetHudSize(SCREENWIDTH, SCREENHEIGHT, true);
		SetFont("PADDLE");
		fixed drawx = (LEFTPADDLEDRAW) + 0.1;
		fixed drawy = ((int)paddle1y[pl]) + 0.1;
		HudMessage(s:"A"; HUDMSG_PLAIN, PDA_PONG_LEFTPADDLE, CR_UNTRANSLATED, drawx, drawy, 0.0);
		
		drawx = (RIGHTPADDLE) + 0.1;
		drawy = ((int)paddle2y[pl]) + 0.1;
		HudMessage(s:"A"; HUDMSG_PLAIN, PDA_PONG_RIGHTPADDLE, CR_UNTRANSLATED, drawx, drawy, 0.0);
		
		SetFont("BALL");
		//gross hack, truncate decimal place
		drawx = (int)ballx[pl] + 0.1;
		drawy = (int)bally[pl] + 0.1;
		HudMessage(s:"A"; HUDMSG_PLAIN, PDA_PONG_BALL, CR_UNTRANSLATED, drawx, drawy, 0.0);
        
		//draw the score
		
		SetFont("STAT_MNO");
		
        HudMessage(scoreboard,
        (p1score[pl] > p2score[pl]) ? "\cf" : "\c-", p1score[pl],
        (p2score[pl] > p1score[pl]) ? "\cf" : "\c-", p2score[pl]; HUDMSG_PLAIN, PDA_PONG_PLAYERSCORE, CR_UNTRANSLATED, PDA_RectX + 50.1, SCORELINE, 0.0);
        
        SetFont("PBORD");
        HudMessage(s:"A"; HUDMSG_PLAIN, PDA_PONG_TOPBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectY + 19.0, 0.0);
        HudMessage(s:"A"; HUDMSG_PLAIN, PDA_PONG_BOTBORD, CR_UNTRANSLATED, PDA_RectX + 5.1, PDA_RectHeight - 0.0, 0.0);
		SetFont("");
		
		
		delay(PONGSPEED);
	}
}