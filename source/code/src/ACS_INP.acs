#define PDA_ChangeDelay 4
#define PDA_ScrollDelay 2
#define HOLD_MAX 15

/** Thanks to HeXaGoN for the maths behind the mouse cursor here! */
/** TODO: Account for "Prescale Mouse Movement" option being off */

// TODO: If scrolling to the bottom or top, scroll automatically

SCRIPT "PDA_MouseController" (void)
{
    const int anymask =
        BT_FORWARD | BT_BACK | BT_ATTACK | BT_ALTATTACK | BT_MOVERIGHT | BT_RIGHT | BT_MOVELEFT | BT_LEFT;
    int buttons[MAX_PLAYERS], oldbuttons[MAX_PLAYERS];
    
    int MIN_HUD_W = 320,
        MIN_HUD_Y = 200;
        
    str graphic[MAX_PLAYERS] = {"","","","","","","",""};

    #define localCursor graphic[PlayerNumber()]
    
    fixed xScale, yScale;
    fixed mx = (MIN_HUD_W/2),
          my = (MIN_HUD_Y/2);
          
    int oldMouseY = 0;
    
    if (GameType() == GAME_SINGLE_PLAYER)
        inverted = GetCVar("invertmouse");

    //#define sensitivity 8
    
    const int HMIN = 0 + PDA_SCREEN_X;
    const int VMIN = 0 + PDA_SCREEN_Y;
    const int HMAX = PDA_SCREEN_WIDTH  + PDA_SCREEN_X - 7;
    const int VMAX = PDA_SCREEN_HEIGHT + PDA_SCREEN_Y - 7;
    
    int PDA_X_sensitivity = GetCvar("DRLA_PDA_sensitivity_x"),
        PDA_Y_sensitivity = GetCvar("DRLA_PDA_sensitivity_y");
    
    int vBuffer = 0;
    int myoff;
    const int ACTIVATOR = -1;
    
    SetHudSize(MIN_HUD_W, MIN_HUD_Y, 0);
    // SetHudClipRect(
    //     PDA_SCREEN_X, PDA_SCREEN_Y, 
    //     PDA_SCREEN_WIDTH, PDA_SCREEN_HEIGHT, 
    //     PDA_SCREEN_WIDTH
    // );
    
    const int _ACTION = BT_ATTACK|BT_USE;
    const int _BACK   = BT_ALTATTACK|BT_JUMP;

    while(PDA_Local.active)
    {
                                     buttons[PlayerNumber()] = GetPlayerInput(ACTIVATOR, INPUT_BUTTONS);
        PDA_LocalMouse.oldState = oldbuttons[PlayerNumber()] = GetPlayerInput(ACTIVATOR, INPUT_OLDBUTTONS);
          
        oldMouseY = PDA_LocalMouse.y;
        
        PDA_LocalMouse.m1 = (buttons[PlayerNumber()] & (_ACTION)) ? true : false;
        PDA_LocalMouse.m2 = (buttons[PlayerNumber()] & (_BACK))   ? true : false;

        // kd: I AM REINFORCEMENTS FROM A DIFFERENT DIMENSION
        fixed mouse_sensitivity    = GetOddSensitivityCVarFixed("mouse_sensitivity", 1.0);
        fixed x_sensitivity        = GetOddSensitivityCVarFixed("m_sensitivity_x",   2.5);
        fixed y_sensitivity        = GetOddSensitivityCVarFixed("m_sensitivity_y",   5.0);
        fixed total_sensitivity    = max(x_sensitivity, y_sensitivity) * mouse_sensitivity;
        
        xScale = GetCVarFixed("m_yaw")   * total_sensitivity;
        yScale = GetCVarFixed("m_pitch") * total_sensitivity;
        // kd: aight now back to Ryan coding
        
        /*
            Cursor should:
                DEFAULT when ???
                POINTER when over a clickable object
                GRAB    when idle
                HOLDER  when dragging screen around
        */
        fixed playerX = GetPlayerInputFixed(ACTIVATOR, INPUT_YAW)   - (GetPlayerInputFixed(ACTIVATOR, INPUT_SIDEMOVE)    / PDA_X_sensitivity);
        fixed playerY = GetPlayerInputFixed(ACTIVATOR, INPUT_PITCH) + (GetPlayerInputFixed(ACTIVATOR, INPUT_FORWARDMOVE) / PDA_Y_sensitivity);

        PDA_LocalMouse.x -= (playerX << PDA_X_sensitivity) * xScale;

        if (inverted) {
            PDA_LocalMouse.y += (playerY << PDA_Y_sensitivity) * yScale;
        } else {
            PDA_LocalMouse.y -= (playerY << PDA_Y_sensitivity) * yScale;
        }

        if (debug) log("mouse [%d:, %d:], max %d:, scrolly: %d:", PDA_LocalMouse.x, PDA_LocalMouse.y, PDA_Local.maxtexty, PDA_Local.scrollingy);
        
        if (PDA_LocalMouse.x < HMIN) PDA_LocalMouse.x = HMIN;
        if (PDA_LocalMouse.x > HMAX) PDA_LocalMouse.x = HMAX;


        if (PDA_LocalMouse.y < VMIN) {
            PDA_LocalMouse.y = VMIN;
            if (PDA_Local.scrollingy < PDA_SCREEN_Y)       PDA_Local.scrollingy += 2.0 * yScale;
        }
        if (PDA_LocalMouse.y > VMAX) {
            PDA_LocalMouse.y = VMAX;
            if (PDA_Local.scrollingy > PDA_Local.maxtexty) PDA_Local.scrollingy -= 2.0 * yScale;
        }
        
        if (PDA_LocalMouse.state == mouse_default) localCursor = (buttons[PlayerNumber()] & _ACTION) ? "PDACURS" : "PDACUR";
   else if (PDA_LocalMouse.state == mouse_pointer) localCursor = "PDAPNT";
   else if (PDA_LocalMouse.state == mouse_grab)    localCursor = "PDAGRB";
   else if (PDA_LocalMouse.state == mouse_holding) localCursor = "PDAHLD";
        
        if (!PDA_Local.pongrunning)
        {
            DisplayIcon(localCursor, PDA_CURSORID, PDA_LocalMouse.x + 0.1, PDA_LocalMouse.y + 0.1, 0, (buttons[PlayerNumber()] & _ACTION) ? 0.8 : 1);
        }
        
        if (PDA_LocalMouse.m1)
        {
            vBuffer               = PDA_LocalMouse.y - oldMouseY;
            PDA_Local.scrollingy += vBuffer;
            myoff                 = vBuffer;
            
            if (PDA_Local.scrollingy < PDA_Local.maxtexty) PDA_Local.scrollingy = PDA_Local.maxtexty;
            if (PDA_Local.scrollingy > VMIN)               PDA_Local.scrollingy = VMIN;
        }
        
        // Right mouse click
        if (PDA_LocalMouse.m2 && !(oldButtons[PlayerNumber()] & _BACK))
        {
            PDA_LocalMouse.state = mouse_default;
            PDA_PlaySound("UI/PDA/Cancel", "pda/soldier", 80);
            
            // Step back into previous page
            if (PDA_Local.category == PDA_ASSEMBLY_DETAIL) {
                PDA_Local.category = PDA_ASSEMBLIES;
            }
            else if (PDA_Local.category == PDA_BESTIARY && PDA_Local.page > 1) {
                PDA_Local.page = 1;
            }
            else if (PDA_Local.category == PDA_BESTIARY_DETAIL) {
                PDA_Local.category = PDA_BESTIARY;
            }
            else if (PDA_Local.category == PDA_PONG) {
                ACS_NamedExecute("QuitPong",0);
                PDA_Local.category = PDA_MISC;
            }
            else if (PDA_Local.category == PDA_HELP) {
                SetUserCVar(PlayerNumber(), "DRLA_PDA_firsttime", false);
                PDA_Wipe();
                PDA_Local.category = PDA_MENU;
                PDA_Local.page = 0;
            }
            else if (PDA_Local.category == PDA_CREDITS) {
                PDA_Local.category = PDA_MENU;
                PDA_Local.page = 0;
            }
            else {
                PDA_Local.category = PDA_MENU;
                PDA_Local.page = 0;
            }
            PDA_ResetScroll();
        }
        
        Delay(1);
        
        vBuffer = 0;
        PDA_LocalMouse.m1 = false;
        PDA_LocalMouse.m2 = false;
    }
}

// EOF