#define asciiNumberZero 48
#define MAX_PLAYERS 8
#define ASSEMBLY_MAX 300
#define TEXT_OFFSET 13 // "PDA_ASSEMBLY_" string length

#define strToNumber(a, i)  (int)(GetChar((a), (i)) - asciiNumberZero)


SCRIPT "DRLA_AssemblyGlobalizer" ENTER {
	bool dowrite;

    // Fetch all available assembly and exotic mod effect data from (g/vk/z)doom's ini
    DRLA_FetchStoredInfo[PlayerNumber()] = GetUserCVarString(PlayerNumber(), "DRLA_knownassemblies");

    int masterMax      = 0;
    str all_assemblies = StrParam(l:"PDA_ASSEMBLIES");
    str_split(separator_character, all_assemblies);
    int ai = 0;
    if (stringArray[0] != "") {
        while ((stringArray[ai++]) != "") {
            if (ai % 2 == 0) masterMax++;
        }
    }

    str actorToken = "";

    /**
     * READ
     * 
     * Read data from ini fetched cvars and give the player all the assemblies.
     */
    for (
        int token_index = 0,         assembly_token = 0; 
            token_index < masterMax, assembly_token < masterMax * 2; 
            token_index++,           assembly_token += 2
    ) {
        actorToken = stringArray[assembly_token];

        int stateAt = strToNumber(DRLA_FetchStoredInfo[PlayerNumber()], token_index);

        if (stateAt >= 0) { // This avoids the incredibly gross bug of forgotten assemblies returning back
            if (stateAt == 0) 
                TakeInventory(actorToken, 1);
            else 
                GiveInventory(actorToken, 1);
        }
    }
}

SCRIPT "DRLA_UpdateINI" (void) {
    int masterMax      = 0;
    str all_assemblies = StrParam(l:"PDA_ASSEMBLIES");
    str_split(separator_character, all_assemblies);
    int ai = 0;
    if (stringArray[0] != "") {
        while ((stringArray[ai++]) != "") {
            if (ai % 2 == 0) masterMax++;
        }
    }

    int DRLA_AssemblyState[MAX_PLAYERS][ASSEMBLY_MAX],
        DRLA_OldAssemblyState[MAX_PLAYERS][ASSEMBLY_MAX];

    str DRLA_CurrentAssemblerState[MAX_PLAYERS] = {{"","","","","","","",""}};
    str actorToken = "";

    // todo: old assembly should read from 

    #define currentState DRLA_AssemblyState[PlayerNumber()]
    #define oldState DRLA_OldAssemblyState[PlayerNumber()]
    #define pendingState DRLA_CurrentAssemblerState[PlayerNumber()]

    // READ ---------------------------------------------------
    // we read from the ini for existing assemblies 
    DRLA_FetchStoredInfo[PlayerNumber()] = GetUserCVarString(PlayerNumber(), "DRLA_knownassemblies");
    for (
        int token_index = 0; 
            token_index < masterMax; 
            token_index++
    ) {
        // set old and current to this new state
        oldState[token_index] = strToNumber(DRLA_FetchStoredInfo[PlayerNumber()], token_index);
        currentState[token_index] = oldState[token_index];
    }

    // WRITE --------------------------------------------------
    for (
        int token_index = 0,         assembly_token = 0; 
            token_index < masterMax, assembly_token < masterMax * 2; 
            token_index++,           assembly_token += 2
    ) {
        actorToken = stringArray[assembly_token];

        // write the current in-game presence of the given token into the appropriate index
        currentState[token_index] = CheckInventory(actorToken);

        // only write if there's a difference between old and current
        if (currentState[token_index] != oldState[token_index]) {
            pendingState = "";
            
            // and only in that case do we start constructing the string that we then..
            for (int sub_index = 0; sub_index < masterMax; sub_index++) {
                if (StrLen(pendingState) <= masterMax) {
                    pendingState = StrParam(
                        s:pendingState, 
                        i:currentState[sub_index]
                    );
                }
            }

            // write to the ini
            SetUserCVarString(PlayerNumber(), "DRLA_knownassemblies", pendingState);
        }
    }
}