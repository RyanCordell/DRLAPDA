#define asciiNumberZero 48
#define ASSEMBLY_MAX 100

#define strToNumber(a, i)  (int)(GetChar((a), (i)) - asciiNumberZero)

SCRIPT "DRLA_AssemblyGlobalizer" ENTER {
	bool dowrite;

    // Fetch all available assembly and exotic mod effect data from (g/vk/z)doom's ini
    DRLA_FetchStoredInfo[PlayerNumber()] = GetUserCVarString(PlayerNumber(), "DRLA_knownassemblies");

    setAssemblyData();

    str actorToken = "";

    /**
     * READ
     * 
     * Read data from ini fetched cvars and give the player all the assemblies.
     */
    for (
        int token_index = 0,         assembly_token = 0; 
            token_index < master_max, assembly_token < master_max * 2; 
            token_index++,           assembly_token += 2
    ) {
        actorToken = stringArray[assembly_token];

        int stateAt = strToNumber(DRLA_FetchStoredInfo[PlayerNumber()], token_index);

        if (stateAt >= 0) { // This avoids the incredibly gross bug of forgotten assemblies returning back
            if (stateAt == 0) 
                TakeInventory(actorToken, 1);
            else 
                GiveInventory(actorToken, 1);
        }
    }
}

SCRIPT "DRLA_UpdateINI" (void) {
    setAssemblyData();

    int DRLA_AssemblyState[MAX_PLAYERS][ASSEMBLY_MAX],
        DRLA_OldAssemblyState[MAX_PLAYERS][ASSEMBLY_MAX];

    str DRLA_CurrentAssemblerState[MAX_PLAYERS] = {{"0","0","0","0","0","0","0","0"}};
    str actorToken = "";

    // todo: old assembly should read from 

    #define currentState DRLA_AssemblyState[PlayerNumber()]
    #define oldState DRLA_OldAssemblyState[PlayerNumber()]
    #define pendingState DRLA_CurrentAssemblerState[PlayerNumber()]

    // READ ---------------------------------------------------
    // we read from the ini for existing assemblies 
    DRLA_FetchStoredInfo[PlayerNumber()] = GetUserCVarString(PlayerNumber(), "DRLA_knownassemblies");
    for (
        int token_index = 0; 
            token_index < master_max; 
            token_index++
    ) {
        // set old and current to this new state
        oldState[token_index] = strToNumber(DRLA_FetchStoredInfo[PlayerNumber()], token_index);
        currentState[token_index] = oldState[token_index];
    }

    bool do_writey = false;
    // then we do a cheeky little check over to see what's changed
    for (
        int token_index = 0,         assembly_token = 0; 
            token_index < master_max, assembly_token < master_max * 2; 
            token_index++,           assembly_token += 2
    ) {
        actorToken = stringArray[assembly_token];

        currentState[token_index] = CheckInventory(actorToken);

        // only write if there's a difference between old and current
        if (currentState[token_index] != oldState[token_index]) {
            do_writey = true;
        }
    }
    // and then we emit a happy little accident
    pendingState = "";
    // WRITE --------------------------------------------------
    for (int token_index = 0; token_index < master_max; token_index++) {
        if (StrLen(pendingState) <= master_max) {
            pendingState = StrParam(s:pendingState, b:currentState[token_index]);
        } else {
            pendingState = "";
        }
    }
    // write to the ini
    if (pendingState != "" && StrLen(pendingState) == master_max) {
        SetUserCVarString(PlayerNumber(), "DRLA_knownassemblies", pendingState);
    }
}