#define asciiNumberZero 48
#define MAX_PLAYERS 8
#define ASSEMBLY_MAX 300

#define strToNumber(a, i)  (int)(GetChar((a), (i)) - asciiNumberZero)

SCRIPT "DRLA_AssemblyGlobalizer" ENTER {
	bool dowrite;

    // Fetch all available assembly and exotic mod effect data from (g/vk/z)doom's ini
    DRLA_FetchStoredInfo[PlayerNumber()] = GetUserCVarString(PlayerNumber(), "DRLA_knownassemblies");

    int masterMax   = 0;
    str allAssemblies = StrParam(l:"PDA_ASSEMBLIES");
    str_split(StrParam("%l:", "PDA_SEPARATOR_CHARACTER"), allAssemblies);
    int ai = 0;
    int TEXT_OFFSET = 13; // "PDA_ASSEMBLY_" string length
    if (stringArray[0] != "") {
        while ((stringArray[ai++]) != "") {
            if (ai % 2 == 0) masterMax++;
        }
    }

    int DRLA_AssemblyState[MAX_PLAYERS][ASSEMBLY_MAX],
        DRLA_OldAssemblyState[MAX_PLAYERS][ASSEMBLY_MAX];

    str DRLA_CurrentAssemblerState[MAX_PLAYERS] = {{"","","","","","","",""}};

    str actorToken = "";

    /**
     * READ
     * 
     * Read data from ini fetched cvars and give the player all the assemblies.
     */
    for (int ti = 0, at = 0; ti < masterMax, at < masterMax * 2; ti++, at += 2) {
        actorToken = stringArray[at];

        int stateAt = strToNumber(DRLA_FetchStoredInfo[PlayerNumber()], ti);

        if (stateAt >= 0) { // This avoids the incredibly gross bug of forgotten assemblies returning back
            if (stateAt == 0) 
                TakeInventory(actorToken, 1);
            else 
                GiveInventory(actorToken, 1);
        }
        
        DRLA_OldAssemblyState[PlayerNumber()][ti] = CheckInventory(actorToken);
    }
}

SCRIPT "DRLA_UpdateAssemblyDB" (void) {
    // Fetch all available assembly and exotic mod effect data from (g/vk/z)doom's ini
    DRLA_FetchStoredInfo[PlayerNumber()] = GetUserCVarString(PlayerNumber(), "DRLA_knownassemblies");

    int masterMax   = 0;
    str allAssemblies = StrParam(l:"PDA_ASSEMBLIES");
    str_split(StrParam("%l:", "PDA_SEPARATOR_CHARACTER"), allAssemblies);
    int ai = 0;
    int TEXT_OFFSET = 13; // "PDA_ASSEMBLY_" string length
    if (stringArray[0] != "") {
        while ((stringArray[ai++]) != "") {
            if (ai % 2 == 0) masterMax++;
        }
    }

    int DRLA_AssemblyState[MAX_PLAYERS][ASSEMBLY_MAX],
        DRLA_OldAssemblyState[MAX_PLAYERS][ASSEMBLY_MAX];

    str DRLA_CurrentAssemblerState[MAX_PLAYERS] = {{"","","","","","","",""}};

    str actorToken = "";

    // Read from INI. Any changes will trigger a write over instead.
    // READ --------------------------------------------------- 
    for (int ti = 0, at = 0; ti < masterMax, at < masterMax * 2; ti++, at += 2) {
        actorToken = stringArray[at];

        DRLA_AssemblyState[PlayerNumber()][ti] = CheckInventory(actorToken);

        if (DRLA_AssemblyState[PlayerNumber()][ti] != DRLA_OldAssemblyState[PlayerNumber()][ti]) {
            DRLA_CurrentAssemblerState[PlayerNumber()] = "";
            
            for (int ti = 0; ti < masterMax; ti++) {
                if (StrLen(DRLA_CurrentAssemblerState[PlayerNumber()]) <= masterMax) {
                    DRLA_CurrentAssemblerState[PlayerNumber()] = StrParam(s:DRLA_CurrentAssemblerState[PlayerNumber()], i:DRLA_AssemblyState[PlayerNumber()][ti]);
                }
            }

            SetUserCVarString(PlayerNumber(), "DRLA_knownassemblies", DRLA_CurrentAssemblerState[PlayerNumber()]);
        }
    }

    // WRITE --------------------------------------------------
}