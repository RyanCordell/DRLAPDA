#pragma define_raw  on
#pragma fixed       on
#pragma block_scope on

#include "zcommon.acs"
#library "ACS_PDA"     // [marrub] This should be after zcommon.acs. (Don't ask me why.)
#include "../headers/PDA_LIB.ach" // Stores IDs, arrays and other things the PDA uses.

/** PDA Databases */
// #include "../database/assemblies.idb" // Assemblies
#include "../database/equipment.idb" // Armors, boots, and etc.
// #include "../database/modeffects.idb" // Modpack effects on weapons

/** Includes for other stuff */
#include "../headers/PDA_BES.ach" // i'm da
#include "../headers/PDA_ITM.ach" // Stores information about the many items in DRLA
#include "../headers/PDA_FNC.ach"
#include "ACS_INP.acs" // PDA input tracker, made separate for better responsiveness
#include "ACS_PNG.acs" // PDA Pong minigame

// [marrub] This is a pretty cool hack
script "PDA_CheckPlayer1Inventory" (str name) {
   SetActivator(0, AAPTR_PLAYER1);
   SetResultValue(CheckInventory(name));
}

script "PDA_GiveEveryoneInventory" (str name) {
   SetActivator(0, AAPTR_NULL);
   GiveInventory(name, 1);
   SetResultValue(1);
}

script "PDA_SetEveryoneInventory" (str name) {
   SetActivator(0, AAPTR_NULL);
   SetInventory(name, 1);
   SetResultValue(1);
}

global str 43:weaponval;
global str 44:armorval;
script "DRLA_HUD_InfoHandler" ENTER {
    while (true) {
        bool IsNotDemonic = false;
            IsNotDemonic  = !CheckInventory("RLDemonicWeaponToken");
        
        str currentWeapon        = GetWeapon();
        str trimmedCurrentWeapon = StrTrim(currentWeapon, 2, 0);
        int Weapon_Name_Printer  = StrParam("PDA_WEAPON_%s:_FLATNAME", trimmedCurrentWeapon);

        int Weapon_DualName_Printer = StrParam("PDA_WEAPON_%s:DEMONARTIFACTS_FLATNAME", trimmedCurrentWeapon);

        int Weapon_Bulk_Quantity      = CheckInventory(StrParam("%s:BulkMod", currentWeapon)),
            Weapon_Power_Quantity     = CheckInventory(StrParam("%s:PowerMod", currentWeapon)),
            Weapon_Agility_Quantity   = CheckInventory(StrParam("%s:AgilityMod", currentWeapon)),
            Weapon_Technical_Quantity = CheckInventory(StrParam("%s:TechnicalMod", currentWeapon)),
            Weapon_Sniper_Quantity    = CheckInventory(StrParam("%s:SniperMod", currentWeapon)),
            Weapon_Firestorm_Quantity = CheckInventory(StrParam("%s:FirestormMod", currentWeapon)),
            Weapon_Nano_Quantity      = CheckInventory(StrParam("%s:NanoMod", currentWeapon)),
            Weapon_Artifact_Quantity  = CheckInventory(StrParam("%s:DemonArtifacts", currentWeapon));
        
        str weaponName = (IsNotDemonic) ? 
                        (CheckInventory(strParam("%s:DemonArtifacts", currentWeapon)) ? 
                            Weapon_DualName_Printer 
                            : Weapon_Name_Printer) 
                        : Weapon_Name_Printer;
        str modsOn     = StrParam("%l: ", weaponName);

        // Weapons
        if(Weapon_Power_Quantity || Weapon_Bulk_Quantity || Weapon_Agility_Quantity || Weapon_Technical_Quantity || 
        Weapon_Sniper_Quantity || Weapon_Firestorm_Quantity || Weapon_Nano_Quantity || Weapon_Artifact_Quantity )
        {
            modsOn = StrParam("%l: (", weaponName);
            modsOn = (Weapon_Power_Quantity     > 0) ? StrParam("%s:P%i:\n", modsOn, Weapon_Power_Quantity    ) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Bulk_Quantity      > 0) ? StrParam("%s:B%i:\n", modsOn, Weapon_Bulk_Quantity     ) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Agility_Quantity   > 0) ? StrParam("%s:A%i:\n", modsOn, Weapon_Agility_Quantity  ) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Technical_Quantity > 0) ? StrParam("%s:T%i:\n", modsOn, Weapon_Technical_Quantity) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Sniper_Quantity    > 0) ? StrParam("%s:S%i:\n", modsOn, Weapon_Sniper_Quantity   ) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Firestorm_Quantity > 0) ? StrParam("%s:F%i:\n", modsOn, Weapon_Firestorm_Quantity) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Nano_Quantity      > 0) ? StrParam("%s:N%i:\n", modsOn, Weapon_Nano_Quantity     ) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Artifact_Quantity  > 0) ? StrParam("%s:D%i:\n", modsOn, Weapon_Artifact_Quantity ) : StrParam("%s:\n", modsOn);
            modsOn = StrParam("%s:)\n", modsOn);
        } else if(!Weapon_Power_Quantity && !Weapon_Bulk_Quantity && !Weapon_Agility_Quantity && !Weapon_Technical_Quantity && 
        !Weapon_Sniper_Quantity && !Weapon_Firestorm_Quantity && !Weapon_Nano_Quantity && !Weapon_Artifact_Quantity)
        {
            modsOn = StrParam("%l:", weaponName);
        };
        weaponval = modsOn;

        // Armor
        str armorType = GetArmorInfo(ARMORINFO_CLASSNAME);
        if (armorType != "None") {
            armorType = StrMid(armorType, 2, StrLen(armorType) - (CheckActorClass(0,"DoomRLRenegade") ? 10 : 0));
            armorType = StrParam(s:"PDA_ARMOR_", s:armorType, s:"_FLATNAME");
            armorval  = StrParam(l:armorType, s:" (",i:CheckInventory("BasicArmor"),s:"%)");
        } else {
            armorval = StrParam(s:"none");
        }
        Delay(1);
    }
}


script "DRLA_HUDStyleChanger" (void) {
    #define statusbarMax 6
    str statusbarHuds[statusbarMax] = {
        "RLStatusBarTritiumHUDType",
        "RLStatusBarTritiumHUDType",
        "RLStatusBarGeoscaperHUDType",
        "RLStatusBarRepublicHUDType",
        "RLStatusBarRigelatinHUDType",
        "RLStatusBarVintageHUDType"
    };
    #define fullscreenMax 6
    str fullscreenHuds[fullscreenMax] = {
        "RLFullscreenShockHUDType", 
        "RLFullscreenHazardHUDType", 
        "RLFullscreenCorruptHUDType", 
        "RLFullscreenFluidHUDType",
        "RLFullscreenStatyHUDType",
        "RLFullscreenTrackerHUDType"
    };

    int statusbarStyleCVar  = GetCVar("DRLA_HUD_statusbarstyle");
    int fullscreenStyleCVar = GetCVar("DRLA_HUD_fullscreenstyle");

    for (int s = 0; s <  statusbarMax; s++) TakeActorInventory(PlayerNumber(),  statusbarHuds[s], 1);
    for (int f = 0; f < fullscreenMax; f++) TakeActorInventory(PlayerNumber(), fullscreenHuds[f], 1);

    GiveActorInventory(PlayerNumber(),  statusbarHuds[statusbarStyleCVar] , 1);
    GiveActorInventory(PlayerNumber(), fullscreenHuds[fullscreenStyleCVar], 1);
}

/** TODO: This and the below script are redundant, look into it */
function void doPDASync (void) {
    int kcount;
    for (int page = 0; page < DRLA_DIFFICULTYTIERS; page++) {
        for (int m = 0; m < DRLA_MONSTER_PAGE_MAX; m++) {
            kcount = StrParam("%s:KillCounter", DRLA_Bestiary[page][m][beast_TOKEN]);
            monsterCheck[page][m]  = CheckInventory(kcount);

            if (CheckPointerInventory(kcount, PlayerNumber()) > 0) {
                PDA_SetEveryoneInventory(kcount);
            }
        }
    }

    int masterMax   = 0;
    str allAssemblies = StrParam(l:"PDA_ASSEMBLIES");
    str_split(StrParam("%l:", "PDA_SEPARATOR_CHARACTER"), allAssemblies);
    int ai = 0;
    int TEXT_OFFSET = 13; // aka length of "PDA_ASSEMBLY_"
    str actorToken = "";
    if (stringArray[0] != "") {
        while ((stringArray[ai++]) != "") {
            if (ai % 2 == 0) masterMax++;
        }
    }
    masterMax--;

    for (int ti = 0; ti <= masterMax; ti++) {
        if (ti % 2 == 0) {
            actorToken = stringArray[ti];
        }
        if (CheckInventory(actorToken)) PDA_SetEveryoneInventory(actorToken);
    }
    // for (int i = 0; i < masterMax; i++) {
    //     if (CheckInventory(DRLA_Assemblies[i][0])) PDA_SetEveryoneInventory(DRLA_Assemblies[i][0]);
    // }
    // for (int w = 0; w < DRLA_EXOTICEFFECTS_MAX; w++) {
    //     for (int e = 1; e < DRLA_EXOTICELEMENTS; e++)
    //         if (CheckInventory(DRLA_UniqueExoticModEffects[w][e])) PDA_SetEveryoneInventory(DRLA_UniqueExoticModEffects[w][e]);
    // }
}
SCRIPT "HeyADollar" enter {
    doPDASync();
    GiveInventory("RLHUDStyleChanger", 1);
    ACS_NamedExecuteAlways("DRLA_HUDStyleChanger", 0);
}

SCRIPT "SyncPDA" (void) net {
    // doPDASync();
}

// [marrub] Static init stuff
script "PDA_GSInit" open {
   for(int i = 0; i < MAX_PLAYERS; i++) {
      PDA_Info[i].active = false;
      PDA_Info[i].pongrunning = false;
      
      PDA_Info[i].category = 0;
      PDA_Info[i].page = 1;
      PDA_Info[i].pagemax = 0;
      
      PDA_Info[i].texty = 0;
      PDA_Info[i].maxtexty = -200;
      PDA_Info[i].scrollingy = 20.0;
      
      PDA_Info[i].clicked = false;
      PDA_Info[i].newEntry[0] = false;
      
      PDA_Info[i].assemblyoffset = 0;
      PDA_Info[i].currentassembly = 0;
      PDA_Info[i].maxassembliesper = 255;
      
      PDA_Info[i].playonce = false;
      
      PDA_Info[i].maxmodlimit = 0;
      PDA_Info[i].detailFetch[i] = "null";
      /*PDA_Mouse[i].x = 0;
      PDA_Mouse[i].y = 0;
      PDA_Mouse[i].m1 = false;
      PDA_Mouse[i].m2 = false;
      PDA_Mouse[i].pollRate = 1;*/
   }
}
// Display terminal
SCRIPT "PDA_Display" (void) net {
    SetHudSize(320,200,0);
    PDA_HasEquipment();
    
    if (!localOneEquipFirst) {
        if (localHasArmor) {
            localABoolField = localHasArmor << 0;
            localOneEquipFirst = true;
        }
        if (localHasBoots) {
            localABoolField = localHasBoots << 1;
            localOneEquipFirst = true;
        }
        if (localHasBackpack) {
            localABoolField = localHasBackpack << 2;
            localOneEquipFirst = true;
        }
    }
    else {
        if (!localHasArmor && !localHasBoots && !localHasBackpack) localOneEquipFirst = false;
    }

    if (!PDA_Local.active) {
        PDA_UnsetScrollArrows();

        SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);

        // No more murdering people while browsing your iP- er, PDA!
        GiveInventory("RLSynthFireDisabled",1);

        FadeTo(0, 0, 0, 0.5, 0.0);

        DisplayIcon("RLZPDA2", PDA_ID, 0.5, 0.5, 0, 1);
        
        PDA_PlaySound("UI/PDA/Online", "pda/soldieropen", 80);

        
        ACS_NamedExecuteAlways("PDA_MouseController",0);
        //ACS_NamedExecuteAlways("PDA_TrackKeys",0);
        ACS_NamedExecuteAlways("PDA_Core",0);

        PDA_Local.active = true;
    } else {
        PDA_NOPONG();
        PDA_Wipe();
        ACS_NamedExecuteAlways("QuitPong",0);
        PDA_UnsetScrollArrows();
        DisplayIcon("RLZPDA", PDA_ID, 0.5, 0.5, 0, 0);
        
        SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
        TakeInventory("RLSynthFireDisabled",1);
        FadeTo(0, 0, 0, 0.0, 0.0);
        
        if (PDA_Local.category == PDA_CREDITS) SetMusic("*");
      
        PDA_PlaySound("UI/PDA/Offline", "pda/soldierclose", 80);
      
        PDA_Local.pongrunning = false;
        PDA_Local.active = false;   
    }
}

SCRIPT "PDA_YOUAREDEADnotbigsurprise" DEATH {
    if (PDA_Local.active) {
        PDA_NOPONG();
        PDA_Wipe();
        ACS_NamedExecuteAlways("QuitPong",0);
        PDA_UnsetScrollArrows();
        DisplayIcon("RLZPDA", PDA_ID, 0.5, 0.5, 0, 0);
        
        SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
        TakeInventory("RLSynthFireDisabled",1);
        FadeTo(0, 0, 0, 0.0, 0.0);
        
        if (PDA_Local.category == PDA_CREDITS) SetMusic("*");
      
        PDA_PlaySound("UI/PDA/Offline", "pda/soldierclose", 80);
      
        PDA_Local.pongrunning = false;
        PDA_Local.active = false;
    }
}

/** Attempt to eliminate problems that result from dying w/ PDA*/
SCRIPT "PDA_Respawn" RESPAWN {
    if (PDA_Local.active) {
        PDA_NOPONG();
        PDA_Wipe();
        ACS_NamedExecuteAlways("QuitPong",0);
        PDA_UnsetScrollArrows();
        DisplayIcon("RLZPDA", PDA_ID, 0.5, 0.5, 0, 0);
        
        SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
        TakeInventory("RLSynthFireDisabled",1);
        FadeTo(0, 0, 0, 0.0, 0.0);
        
        if(PDA_Local.category == PDA_CREDITS) SetMusic("*");
      
        PDA_PlaySound("UI/PDA/Offline", "pda/soldierclose", 80);
      
        PDA_Local.pongrunning = false;
        PDA_Local.active = false;
    }
}

SCRIPT "PDA_Core" (void) {  
    PDA_Local.scrollingy = 20.0;
    
    while (PDA_Local.active) {
        SetHudSize(320,200,0);
        SetHudClipRect(PDA_RectX, PDA_RectY, PDA_RectWidth, PDA_RectHeight, PDA_RectWidth);

        PDA_DefaultFont();

        PDA_Wipe();

        if (GetUserCvar(PlayerNumber(), "DRLA_PDA_firsttime") != FALSE) PDA_SetCategory(PDA_HELP);
        
        for (int t = 0; t < DRLA_DIFFICULTYTIERS; t++) {
            for (int m = 0; m < DRLA_MONSTER_PAGE_MAX; m++) {
                monsterCheck[t][m] = CheckInventory(StrParam(s:DRLA_Bestiary[t][m][beast_TOKEN],s:"KillCounter"));
                
                if (oldCheck[t][m] != monsterCheck[t][m] && oldCheck[t][m] < 2 && monsterCheck[t][m] < 2) {
                    PDA_Local.newEntry[t] = true;
                }
            }
        }
        
        switch (PDA_Local.category) {
            case PDA_MENU:
                #include "../../pages/menu.pdap"
                break;
            case PDA_CLASSES:
                #include "../../pages/player.pdap"
                break;
            case PDA_WEAPONS:
                #include "../../pages/weapons.pdap"
                break;
            case PDA_ARMORS:
                #include "../../pages/armors.pdap"
                break;
            case PDA_ASSEMBLIES:
                #include "../../pages/assemblies.pdap"
                break;
            case PDA_BESTIARY:
                #include "../../pages/bestiary.pdap"
                break;
            case PDA_ITEMS:
                #include "../../pages/items.pdap"
                break;
            case PDA_HELP:
                #include "../../pages/help.pdap"
                break;
            case PDA_MISC:
                #include "../../pages/misc.pdap"
                break;
            
            case PDA_PONG:
                #include "../../pages/pong.pdap"
                break;
            case PDA_CREDITS:
                #include "../../pages/credits.pdap"
                break;
            case PDA_ASSEMBLY_DETAIL:
                #include "../../pages/assemblyinfo.pdap"
                break;
            case PDA_BESTIARY_DETAIL:
                #include "../../pages/beastinfo.pdap"
                break;
        }
        
        PDA_DefaultFont();

        int freelook = GetCvar("sv_freelook");
        int nofreelook = GetCvar("sv_nofreelook");
        if (freelook == 1 || nofreelook == 1) {
            HudMessage(s:"\cgWARNING!\c- The PDA will not function properly with \cb\"Allow freelook\"\c- disabled! Sorry about that."; 
            HUDMSG_PLAIN, PDA_PLAYERS_BUTTON, CR_GREEN, (PDA_RectX) + 10.1, (PDA_RectY) + 35.1, 0);
            HudMessage(s:"Find either \cb\"sv_freelook\"\c-, \cb\"sv_nofreelook\"\c-, or \cbenable mouselook under Mouse Options\c- to rectify this."; 
            HUDMSG_PLAIN, PDA_WEAPONS_BUTTON, CR_GREEN, (PDA_RectX) + 10.1, (PDA_RectY) + 60.1, 0);
        }

        for (int t = 0; t < DRLA_DIFFICULTYTIERS; t++) {
            for (int m = 0; m < DRLA_MONSTER_PAGE_MAX; m++)
            {
                oldCheck[t][m] = monsterCheck[t][m];
            }
        }

        SetHudClipRect(0,0,0,0,0);
        Delay(PDA_Responsiveness);
    }
}

#include "ACS_WRT.acs"

// EOF