#pragma define_raw  on
#pragma fixed       on
#pragma block_scope on

#include "zcommon.acs"
#library "ACS_PDA"     // [marrub] This should be after zcommon.acs. (Don't ask me why.)

#include "../headers/PDA_LIB.ach" // Stores IDs, arrays and other things the PDA uses.
#include "../database/equipment.idb" // Armors, boots, and etc.
#include "../headers/PDA_FNC.ach"

#include "ACS_INP.acs" // PDA input tracker, made separate for better responsiveness

global str 43:weaponval;
global str 44:armorval;

// [marrub] This is a pretty cool hack
script "PDA_CheckPlayer1Inventory" (str name) {
   SetActivator(0, AAPTR_PLAYER1);
   SetResultValue(CheckInventory(name));
}

script "PDA_GiveEveryoneInventory" (str name) {
   SetActivator(0, AAPTR_NULL);
   GiveInventory(name, 1);
   SetResultValue(1);
}

script "PDA_SetEveryoneInventory" (str name) {
   SetActivator(0, AAPTR_NULL);
   SetInventory(name, 1);
   SetResultValue(1);
}

script "DRLA_HUD_InfoHandler" ENTER {
    while (true) {
        weapon_checks[weapon_checks_isdemonic] = !CheckInventory("RLDemonicWeaponToken");
        
        player_weapon[player_weapon_current] = GetWeapon();
        player_weapon[player_weapon_trimmed] = StrTrim(player_weapon[player_weapon_current], 2, 0);

        weapon_info[weapon_info_icon]     = StrParam("PDA_WEAPON_%s:_ICON", player_weapon[player_weapon_trimmed]);
        weapon_info[weapon_info_name]     = StrParam("PDA_WEAPON_%s:_NAME", player_weapon[player_weapon_trimmed]);
        weapon_info[weapon_info_dualname] = StrParam("PDA_WEAPON_%s:DEMONARTIFACTS_NAME", player_weapon[player_weapon_trimmed]);

        Weapon_Mod_Quantity[mod_bulk]      = CheckInventory(StrParam("%s:BulkMod", player_weapon[player_weapon_current])),
        Weapon_Mod_Quantity[mod_power]     = CheckInventory(StrParam("%s:PowerMod", player_weapon[player_weapon_current])),
        Weapon_Mod_Quantity[mod_agility]   = CheckInventory(StrParam("%s:AgilityMod", player_weapon[player_weapon_current])),
        Weapon_Mod_Quantity[mod_technical] = CheckInventory(StrParam("%s:TechnicalMod", player_weapon[player_weapon_current])),
        Weapon_Mod_Quantity[mod_sniper]    = CheckInventory(StrParam("%s:SniperMod", player_weapon[player_weapon_current])),
        Weapon_Mod_Quantity[mod_firestorm] = CheckInventory(StrParam("%s:FirestormMod", player_weapon[player_weapon_current])),
        Weapon_Mod_Quantity[mod_nano]      = CheckInventory(StrParam("%s:NanoMod", player_weapon[player_weapon_current])),
        Weapon_Mod_Quantity[mod_artifact]  = CheckInventory(StrParam("%s:DemonArtifacts", player_weapon[player_weapon_current]));
        
        str weaponName = (weapon_checks[weapon_checks_isdemonic]) 
                        ? (CheckInventory(StrParam("%s:DemonArtifacts", player_weapon[player_weapon_current])) 
                            ? weapon_info[weapon_info_dualname] 
                            : weapon_info[weapon_info_name]) 
                        : weapon_info[weapon_info_name];
        str modsOn     = StrParam("%l: ", weaponName);

        // Weapons
        if (Weapon_Mod_Quantity[mod_power] || Weapon_Mod_Quantity[mod_bulk] || Weapon_Mod_Quantity[mod_agility] || Weapon_Mod_Quantity[mod_technical] || 
        Weapon_Mod_Quantity[mod_sniper] || Weapon_Mod_Quantity[mod_firestorm] || Weapon_Mod_Quantity[mod_nano] || Weapon_Mod_Quantity[mod_artifact] )
        {
            modsOn = StrParam("%l: (", weaponName);
            modsOn = (Weapon_Mod_Quantity[mod_power]     > 0) ? StrParam("%s:P%i:\n", modsOn, Weapon_Mod_Quantity[mod_power]    ) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Mod_Quantity[mod_bulk]      > 0) ? StrParam("%s:B%i:\n", modsOn, Weapon_Mod_Quantity[mod_bulk]     ) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Mod_Quantity[mod_agility]   > 0) ? StrParam("%s:A%i:\n", modsOn, Weapon_Mod_Quantity[mod_agility]  ) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Mod_Quantity[mod_technical] > 0) ? StrParam("%s:T%i:\n", modsOn, Weapon_Mod_Quantity[mod_technical]) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Mod_Quantity[mod_sniper]    > 0) ? StrParam("%s:S%i:\n", modsOn, Weapon_Mod_Quantity[mod_sniper]   ) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Mod_Quantity[mod_firestorm] > 0) ? StrParam("%s:F%i:\n", modsOn, Weapon_Mod_Quantity[mod_firestorm]) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Mod_Quantity[mod_nano]      > 0) ? StrParam("%s:N%i:\n", modsOn, Weapon_Mod_Quantity[mod_nano]     ) : StrParam("%s:\n", modsOn);
            modsOn = (Weapon_Mod_Quantity[mod_artifact]  > 0) ? StrParam("%s:D%i:\n", modsOn, Weapon_Mod_Quantity[mod_artifact] ) : StrParam("%s:\n", modsOn);
            modsOn = StrParam("%s:)\n", modsOn);
        } else if (!Weapon_Mod_Quantity[mod_power] && !Weapon_Mod_Quantity[mod_bulk] && !Weapon_Mod_Quantity[mod_agility] && !Weapon_Mod_Quantity[mod_technical] && !Weapon_Mod_Quantity[mod_sniper] && !Weapon_Mod_Quantity[mod_firestorm] && !Weapon_Mod_Quantity[mod_nano] && !Weapon_Mod_Quantity[mod_artifact]) {
            modsOn = StrParam("%l:", weaponName);
        }
        weaponval = modsOn;

        weapon_checks[weapon_checks_disassemblable] = (GetActorClass(0) == "DoomRLTechnician" && !CheckInventory("RLStandardWeaponToken"));
        weapon_checks[weapon_checks_supports_artifacts] = CheckInventory(StrParam("%s:DemonArtifacts", player_weapon[player_weapon_current]));

        setMaxModLimit();

        checkPlayerWeaponPerk();
        checkWeaponArmorSetPerk();

        // Armor
        str armorType = GetArmorInfo(ARMORINFO_CLASSNAME);
        if (armorType != "None") {
            armorType = StrMid(armorType, 2, StrLen(armorType) - (CheckActorClass(0,"DoomRLRenegade") ? 10 : 0));
            armorType = StrParam(s:"PDA_ARMOR_", s:armorType, s:"_FLATNAME");
            armorval  = StrParam(l:armorType, s:" (",i:CheckInventory("BasicArmor"),s:"%)");
        } else {
            armorval = StrParam(s:"none");
        }
        Delay(1);
    }
}


script "DRLA_HUDStyleChanger" (void) {
    #define statusbarMax 6
    str statusbarHuds[statusbarMax] = {
        "RLStatusBarTritiumHUDType",
        "RLStatusBarTritiumHUDType",
        "RLStatusBarGeoscaperHUDType",
        "RLStatusBarRepublicHUDType",
        "RLStatusBarRigelatinHUDType",
        "RLStatusBarVintageHUDType"
    };
    #define fullscreenMax 6
    str fullscreenHuds[fullscreenMax] = {
        "RLFullscreenShockHUDType", 
        "RLFullscreenHazardHUDType", 
        "RLFullscreenCorruptHUDType", 
        "RLFullscreenFluidHUDType",
        "RLFullscreenStatyHUDType",
        "RLFullscreenTrackerHUDType"
    };

    int statusbarStyleCVar  = GetCVar("DRLA_HUD_statusbarstyle");
    int fullscreenStyleCVar = GetCVar("DRLA_HUD_fullscreenstyle");

    for (int s = 0; s <  statusbarMax; s++) TakeActorInventory(PlayerNumber(),  statusbarHuds[s], 1);
    for (int f = 0; f < fullscreenMax; f++) TakeActorInventory(PlayerNumber(), fullscreenHuds[f], 1);

    GiveActorInventory(PlayerNumber(),  statusbarHuds[statusbarStyleCVar] , 1);
    GiveActorInventory(PlayerNumber(), fullscreenHuds[fullscreenStyleCVar], 1);
}

/** TODO: This and the below script are redundant, look into it */
function void doPDASync (void) {
    for (int page = 0; page < DRLA_DIFFICULTYTIERS; page++) {
        for (int m = 0; m < DRLA_MONSTER_PAGE_MAX; m++) {
            localListEnemy[list_kill_count] = StrParam("%s:KillCounter", DRLA_Bestiary[page][m][beast_TOKEN]);
            monsterCheck[page][m]  = CheckInventory(localListEnemy[list_kill_count]);

            if (CheckPointerInventory(localListEnemy[list_kill_count], PlayerNumber()) > 0) {
                PDA_SetEveryoneInventory(localListEnemy[list_kill_count]);
            }
        }
    }

    setAssemblyData();

    str actorToken = "";
    for (int ti = 0; ti <= master_max; ti++) {
        if (ti % 2 == 0) 
            actorToken = stringArray[ASSEMBLY_DIM][ti];

        if (CheckInventory(actorToken)) 
            PDA_SetEveryoneInventory(actorToken);
    }
}

function void reset_pda_stuff (str location) {
    PDA_NOPONG();
    PDA_ClearHeader();
    PDA_UnsetScrollArrows();
    PDA_SuperWipe(location);
    // ACS_NamedExecuteAlways("QuitPong",0);
    DisplayIcon("RLZPDA", PDA_ID, 0.5, 0.5, 0, 0);
    
    SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
    TakeInventory("RLSynthFireDisabled",1);
    FadeTo(0, 0, 0, 0.0, 0.0);
    
    if (PDA_Local.category == PDA_CREDITS) SetMusic("*");
    
    PDA_PlaySound("UI/PDA/Offline", "pda/soldierclose", 80);
    
    PDA_Local.pongrunning = false;
    PDA_Local.active = false;
}


SCRIPT "HeyADollar" enter {
    doPDASync();
    GiveInventory("RLHUDStyleChanger", 1);
    ACS_NamedExecuteAlways("DRLA_HUDStyleChanger", 0);
}

// [marrub] Static init stuff
script "PDA_GSInit" open {
   for (int i = 0; i < MAX_PLAYERS; i++) {
      PDA_Info[i].active = false;
      PDA_Info[i].pongrunning = false;
      
      PDA_Info[i].category = 0;
      PDA_Info[i].page = 1;
      PDA_Info[i].previous_page = 1;
      PDA_Info[i].pagemax = 0;
      
      PDA_Info[i].texty = 0;
      PDA_Info[i].max_text_y = -200;
      PDA_Info[i].scrollingY = 20.0;
      PDA_Info[i].scrollYDelta = 0;
      
      PDA_Info[i].clicked = false;
      PDA_Info[i].newEntry[0] = false;
      
      PDA_Info[i].assemblyoffset = 0;
      PDA_Info[i].currentassembly = 0;
      PDA_Info[i].maxassembliesper = 255;
      
      PDA_Info[i].playonce = false;
      
      PDA_Info[i].maxmodlimit = 0;
      PDA_Info[i].detailFetch[i] = "null";
      /*PDA_Mouse[i].x = 0;
      PDA_Mouse[i].y = 0;
      PDA_Mouse[i].m1 = false;
      PDA_Mouse[i].m2 = false;
      PDA_Mouse[i].pollRate = 1;*/
   }
}

// Display terminal
SCRIPT "PDA_Display" (void) net {
    int PDA_THEME = GetUserCVar(PlayerNumber(), "DRLA_PDA_theme");
    str pdaGraphic = "RLZPDA2";
    
    switch (PDA_THEME) {
        case THEME_SLIM:
            pdaGraphic = "RLZPDA3";
            break;
        case THEME_BULKY:
        default:
            pdaGraphic = "RLZPDA2";
            break;
    }

    PDA_FONT[0] = GetUserCVarString(PlayerNumber(), "DRLA_PDA_font");
    SetHudSize(320,200,0);
    PDA_HasEquipment();
    
    if (!localOneEquipFirst) {
        if (localHasArmor) {
            localEqBoolField = localHasArmor << 0;
            localOneEquipFirst = true;
        }
        if (localHasBoots) {
            localEqBoolField = localHasBoots << 1;
            localOneEquipFirst = true;
        }
        if (localHasBackpack) {
            localEqBoolField = localHasBackpack << 2;
            localOneEquipFirst = true;
        }
    }
    else {
        if (!localHasArmor && !localHasBoots && !localHasBackpack) localOneEquipFirst = false;
    }

    if (!PDA_Local.active) {
        PDA_UnsetScrollArrows();

        SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);

        // No more murdering people while browsing your iP- er, PDA!
        GiveInventory("RLSynthFireDisabled",1);

        FadeTo(0, 0, 0, 0.5, 0.0);

        DisplayIcon(pdaGraphic, PDA_ID, 0.5, 0.5, 0, 1);
        
        PDA_PlaySound("UI/PDA/Online", "pda/soldieropen", 80);

        
        ACS_NamedExecuteAlways("PDA_MouseController",0);
        //ACS_NamedExecuteAlways("PDA_TrackKeys",0);
        ACS_NamedExecuteAlways("PDA_Core",0);

        PDA_Local.active = true;
    } else {
        reset_pda_stuff("PDA_Display Terminate");
    }
}

SCRIPT "PDA_YOUAREDEADnotbigsurprise" DEATH {
    if (PDA_Local.active) {
        reset_pda_stuff("Player Death");
    }
}

/** Attempt to eliminate problems that result from dying w/ PDA*/
SCRIPT "PDA_Respawn" RESPAWN {
    if (PDA_Local.active) {
        reset_pda_stuff("Respawn");
    }
}


function void page_menu (void) {
    if (PDA_Local.category != PDA_MENU) return;
    #include "../../pages/menu.pdap"
}

function void page_player (void) {
    if (PDA_Local.category != PDA_CLASSES) return;
    #include "../../pages/player.pdap"
}

function void page_weapons (void) {
    if (PDA_Local.category != PDA_WEAPONS) return;
    #include "../../pages/weapons.pdap"
}

function void page_armors (void) {
    if (PDA_Local.category != PDA_ARMORS) return;
   #include "../../pages/armors.pdap"
}

function void page_assemblies (void) {
    if (PDA_Local.category != PDA_ASSEMBLIES) return;
    #include "../../pages/assemblies.pdap"
}

function void page_bestiary (void) {
    if (PDA_Local.category != PDA_BESTIARY) return;
    checkMonsterKillCount();
    updateOldMonsterKillCount();
    #include "../../pages/bestiary.pdap"
}

function void page_items (void) {
    if (PDA_Local.category != PDA_ITEMS) return;
    #include "../../pages/items.pdap"
}

function void page_help (void) {
    if (PDA_Local.category != PDA_HELP) return;
    #include "../../pages/help.pdap"
}

function void page_misc (void) {
    if (PDA_Local.category != PDA_MISC) return;
    #include "../../pages/misc.pdap"
}

function void page_pong (void) {
    if (PDA_Local.category != PDA_PONG) return;
    #include "../../pages/pong.pdap"
}

function void page_credits (void) {
    if (PDA_Local.category != PDA_CREDITS) return;
    #include "../../pages/credits.pdap"
}

function void page_assembly_info (void) {
    if (PDA_Local.category != PDA_ASSEMBLY_DETAIL) return;
    #include "../../pages/assemblyinfo.pdap"
}

function void page_monster_info (void) {
    if (PDA_Local.category != PDA_BESTIARY_DETAIL) return;
    checkMonsterKillCount();
    updateOldMonsterKillCount();
    #include "../../pages/beastinfo.pdap"
}

SCRIPT "PDA_Core" (void) {
    #include "PDA_STC.acs"
    PDA_Local.scrollingY = 20.0;

    if (PDA_Local.active) {
        if (GetUserCvar(PlayerNumber(), "DRLA_PDA_firsttime") != FALSE) PDA_SetCategory(PDA_HELP);
        PDA_DefaultFont();

        separator_character = StrParam("%l:", "PDA_SEPARATOR_CHARACTER");

        PDA_OnChange();
    }
    
    while (PDA_Local.active) {
        PDA_HandleHeader();
        
        switch (PDA_Local.category) {
            case PDA_MENU:
                page_menu();
                break;
            case PDA_CLASSES:
                page_player();
                break;
            case PDA_WEAPONS:
                page_weapons();
                break;
            case PDA_ARMORS:
                page_armors();
                break;
            case PDA_ASSEMBLIES:
                page_assemblies();
                break;
            case PDA_BESTIARY:
                page_bestiary();
                break;
            case PDA_ITEMS:
                page_items();
                break;
            case PDA_HELP:
                page_help();
                break;
            case PDA_MISC:
                page_misc();
                break;
            
            case PDA_PONG:
                page_menu();
                break;
            case PDA_CREDITS:
                page_credits();
                break;
            case PDA_ASSEMBLY_DETAIL:
                page_assembly_info();
                break;
            case PDA_BESTIARY_DETAIL:
                page_monster_info();
                break;
            default:
                log("how'd you get here?");
                break;
        }
        Delay(PDA_Responsiveness);
    }
    SetHudClipRect(0,0,0,0,0);
}

#include "ACS_WRT.acs"

// EOF