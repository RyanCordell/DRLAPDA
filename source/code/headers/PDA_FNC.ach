
// TODO: handle redraws via a more manual update method

function int str_find(str haystack, str needle, int index) {
    int i           = index;
    int haystackLen = StrLen(haystack);
    int needleLen   = StrLen(needle);
    int matching    = 0;

    while (i < haystackLen) {
        if (GetChar(haystack, i) == GetChar(needle, 0)) {
            int remaining = needleLen - 1;
            int passed    = 1;

            while (remaining > 0) {
                if (GetChar(haystack, i + passed) == GetChar(needle, passed)) {
                    passed++;
                    remaining--;
                } else {
                    break;
                }
            }
            return (!remaining) ? i : -1;
        }
        i++;
    }

    return -1;
}

#define clearStringArray() \
    for (int i = 0; i < STRING_ARRAY_MAX; i++) stringArray[i] = ""; \

// Thanks to DavidPH!
function int str_split (str separator, str input) {
    int inputLen     = StrLen(input);
    int separatorLen = StrLen(separator);
    int n      = 0;
    int pos    = 0,
        oldPos = 0;

    clearStringArray();

    while ((pos = str_find(input, separator, oldPos)) != -1) {
        stringArray[n++] = StrMid(input, oldPos, pos - oldPos);
        oldPos = pos + separatorLen;
    }

    stringArray[n++] = StrRight(input, inputLen - oldPos);

    return n+1;
}

// Debugging functions for SetHudClipRect
function void PrintSprite (str Sprite, int ID, fixed X, fixed Y, fixed DelayTime) {
    SetFont(Sprite);
    HudMessage("A\n"; HUDMSG_PLAIN, ID, CR_UNTRANSLATED, X, Y, DelayTime);
}

function void PrintSpriteAlpha (str Sprite, int ID, fixed X, fixed Y, fixed DelayTime, fixed Alpha) {
    SetFont(Sprite);
    HudMessage("A\n"; HUDMSG_ALPHA, ID, CR_UNTRANSLATED, X, Y, DelayTime, Alpha);
}

function void DrawBorder (int X, int Y, int Width, int Height) {
	SetHudClipRect(X, Y, Width, Height);
	PrintSpriteAlpha("BarHorz", 0, X,             Y,              0.05, 0.3);
	PrintSpriteAlpha("BarVert", 0, X,             Y,              0.05, 0.3);
	PrintSpriteAlpha("BarVert", 0, X + Width - 1, Y,              0.05, 0.3);
	PrintSpriteAlpha("BarHorz", 0, X,             Y + Height - 1, 0.05, 0.3);
	SetFont("");
}

function void PDA_Wipe (str caller) {
    // Avoid wiping the header
	for (int wipeIndex = 0; wipeIndex <= PDA_INFOTOPID - 1; wipeIndex++) {
		HudMessage(s:"\n"; HUDMSG_PLAIN, wipeIndex, CR_UNTRANSLATED, 0, 0, 0.0, 0.0);
		HudMessage(s:"\n"; HUDMSG_ALPHA, wipeIndex, CR_UNTRANSLATED, 0, 0, 0.0, 0.0);
	}
}

function void PDA_SuperWipe (str caller) {
	for (int wipeIndex = 0; wipeIndex <= PDA_REALLYLASTID; wipeIndex++) {
		HudMessage(s:"\n"; HUDMSG_PLAIN, wipeIndex, CR_UNTRANSLATED, 0, 0, 0.0, 0.0);
		HudMessage(s:"\n"; HUDMSG_ALPHA, wipeIndex, CR_UNTRANSLATED, 0, 0, 0.0, 0.0);
	}
}

function void PDA_UnsetScrollWindow (void) {
	SetHudClipRect(PDA_SCREEN_X, PDA_SCREEN_Y, PDA_SCREEN_WIDTH, PDA_SCREEN_HEIGHT, PDA_SCREEN_WIDTH);
}

#define afterPageDefaults(a) \
    PDA_Wipe((a)); \
    PDA_DefaultFont(); \
    PDA_UnsetScrollWindow(); \


function void PDA_SetupHeaderBounds (void) {
    SetHudSize(NEW_RESOLUTION_WIDTH, NEW_RESOLUTION_HEIGHT);

    int x = PDA_SCREEN_X + 4;
    int y = PDA_SCREEN_Y;
    int w = PDA_SCREEN_WIDTH * NEW_RESOLUTION_X;
    int h = PDA_SCREEN_Y + 38;
    int ww = (PDA_SCREEN_WIDTH * NEW_RESOLUTION_X) - PDA_SCREEN_X;

    SetHudClipRect(x, y, w, h, ww);
}

function void PDA_SetupScreenBounds (void) {
    // SetHudClipRect(0,0,0,0,0);
    PDA_Wipe("PDA_SetupScreenBounds"); // at least this finally seemed to help out w/ retention bugs
    SetHudSize(NEW_RESOLUTION_WIDTH, NEW_RESOLUTION_HEIGHT);

    int x = PDA_SCREEN_X + 4;
    int y = PDA_SCROLLABLE_Y;
    int w = PDA_SCREEN_WIDTH * NEW_RESOLUTION_X;
    int h = PDA_SCROLLABLE_HEIGHT;
    int ww = (PDA_SCREEN_WIDTH * NEW_RESOLUTION_X) - (PDA_SCREEN_X * 3);

    SetHudClipRect(x, y, w, h, ww);

    if (debug) {
        DrawBorder(PDA_SCREEN_X * NEW_RESOLUTION_X, PDA_SCROLLABLE_Y,
                PDA_SCREEN_WIDTH * NEW_RESOLUTION_X, PDA_SCROLLABLE_HEIGHT);
        SetHudClipRect(x, y, w, h, ww);
    }
}
function void PDA_SetupScreenBounds_Wipeless (void) {
    SetHudSize(NEW_RESOLUTION_WIDTH, NEW_RESOLUTION_HEIGHT);

    int x = PDA_SCREEN_X + 4;
    int y = PDA_SCROLLABLE_Y;
    int w = PDA_SCREEN_WIDTH * NEW_RESOLUTION_X;
    int h = PDA_SCROLLABLE_HEIGHT;
    int ww = (PDA_SCREEN_WIDTH * NEW_RESOLUTION_X) - (PDA_SCREEN_X * 3);

    SetHudClipRect(x, y, w, h, ww);
}

function void PDA_ClearHeader (void) {
    HudMessage(s:""; HUDMSG_PLAIN, PDA_INFOTOPID, CR_GREEN, PDA_SCREEN_X + 100.0 + PDA_HEADER_X + X_LEFT_EDGE, PDA_SCREEN_Y + 2.0 + Y_TOP_EDGE, 0.0);
}

// Useful for scroll arrows
function void DisplayIcon (str Sprite, int ID, fixed X, fixed Y, fixed DelayTime, fixed Alpha) {
    SetFont(Sprite);
    HudMessage(s:"A\n"; HUDMSG_ALPHA, ID, CR_UNTRANSLATED, X, Y, DelayTime, Alpha);
	PDA_DefaultFont();
}

function void DisplayIconParallax (str Sprite, int ID, fixed X, fixed Y, fixed DelayTime, fixed Alpha) {
    SetFont(Sprite);
    int _yTemp = PDA_Local.scrollingY + Y;
        _yTemp *= NEW_RESOLUTION_Y;
    HudMessage(s:"A\n"; HUDMSG_ALPHA, ID, CR_UNTRANSLATED, X, _yTemp + Y_TOP_EDGE, DelayTime, Alpha);
	PDA_DefaultFont();
}

function void DisplayArmorIcon (str Sprite, int ID, fixed X, fixed Y, fixed Alpha) {
    SetFont(StrParam("%l:", Sprite));
    HudMessage(s:"A\n"; HUDMSG_ALPHA, ID, CR_UNTRANSLATED, X, Y, 0, Alpha);
	SetFont(PDA_FONT[0]);
}

function int batoi (str stri)  {
    int res = 0;

    for (int i = 0; stri[i] != '\0'; ++i) {
        res = res*10 + stri[i] - '0';
    }

    return res;
}

// kd: An "odd sensitivity cvar" is a mouse sensitivity cvar that became unavailable starting gzd
// 4.5.0 when mouse sensitivity stuff got overhauled. One example is mouse_sensitivity being removed
// and m_sensitivity_x and m_sensitivity_y being added instead.
function fixed GetOddSensitivityCVarFixed (str cvar_name, fixed default_value) {
    fixed cvar_value = GetCVarFixed(cvar_name);

    if (cvar_value == 0) {
        return default_value;
    }

    return cvar_value;
}

function fixed max (fixed x, fixed y) {
    return (x < y) ? y : x;
}

function void HudMessageParallax(str text, int type, int id, int color, fixed x, fixed y, fixed holdTime, fixed alpha) {
    int _xTemp = (PDA_SCREEN_X + x) * NEW_RESOLUTION_X;
    int _yTemp = (PDA_Local.scrollingY * NEW_RESOLUTION_Y) + y;
    fixed _x = _xTemp + X_LEFT_EDGE;
    fixed _y = _yTemp + Y_TOP_EDGE;
    HudMessage(s:text; type, id, color, _x, _y, holdTime, alpha);
}

function int CheckPointerInventory (str item, int pn) {
	SetActivator(0, AAPTR_PLAYER1 << pn);
	return CheckInventory(item);
}

function int SetInventory (str Item, int Count) {
    int n = Count - CheckInventory(Item);

    if (n > 0)
        GiveInventory(Item, n);
    else if (n < 0)
        TakeInventory(Item, -n);

    return n;
}

function int checkSpecialArmorTokens(void) {
    return CheckInventory("RLEnclaveSetBonusActive")                 ||
           CheckInventory("PowerRLPrototypeAssaultShieldProtection") ||
           CheckInventory("PowerRLOverchargeSystemProtection")       ||
           CheckInventory("RLCyberneticArmorModdedToken")            ||
           CheckInventory("RLDeathFromAboveSetBonusActive")          ||
           CheckInventory("PowerRLInquisitorsSetBonusProtection");
}

#define checkMonsterKillCount() \
    for (int t = 0; t < DRLA_DIFFICULTYTIERS; t++) { \
        for (int m = 0; m < DRLA_MONSTER_PAGE_MAX; m++) { \
            monsterCheck[t][m] = CheckInventory(StrParam(s:DRLA_Bestiary[t][m][beast_TOKEN],s:"KillCounter")); \
            if (oldCheck[t][m] != monsterCheck[t][m] && oldCheck[t][m] < 2 && monsterCheck[t][m] < 2) { \
                PDA_Local.newEntry[t] = true; \
            } \
        } \
    } \

#define updateOldMonsterKillCount() \
    for (int t = 0; t < DRLA_DIFFICULTYTIERS; t++) { \
        for (int m = 0; m < DRLA_MONSTER_PAGE_MAX; m++) { \
            oldCheck[t][m] = monsterCheck[t][m]; \
        } \
    } \


// int _xTemp = (PDA_SCREEN_X * NEW_RESOLUTION_X) + (x * NEW_RESOLUTION_X);
#define assignButtonParams(a, b) \
    int _xTemp = PDA_SCREEN_X + x; \
    int _yTemp = PDA_Local.scrollingY + y; \
    (a).id = id; \
    (a).x = _xTemp; \
    (a).y = _yTemp; \
    (a).width = width; \
    (a).height = height; \
    (a).oldstate = (a).state; \
    (a).label = (b); \

// TODO: height for buttons should actually decrease as they go past the normal scroll area
#define CheckBounds(a) \
    PDA_LocalMouse.x >= (a).x - 1 && PDA_LocalMouse.x <= (a).x + (a).width \
    && \
    PDA_LocalMouse.y >= (a).y - 2 && PDA_LocalMouse.y <= (a).y + (a).height \

#define PDA_PlaySound(PDA_Sound, soldier, volume) \
    LocalAmbientSound(!GetCVar("DRLA_PDA_soldier") ? PDA_Sound : soldier, volume); \

#define buttonBoundsDefault(a) \
    if (CheckBounds(a)) { \
        (a).state = button_hovered; \
        PDA_LocalMouse.state = mouse_pointer; \
        if ((a).state != (a).oldstate) { \
            PDA_PlaySound("UI/PDA/Select", "pda/soldier", 80); \
            (a).oldstate = (a).state; \
        } \
        if (PDA_LocalMouse.m1 && !(PDA_LocalMouse.oldState & BT_ATTACK)) { \
            PDA_PlaySound("UI/PDA/ChangePage", "pda/soldier", 80); \
            (a).state = button_clicked; \
        } \
    } else { \
        (a).state = button_none; \
        PDA_Local.playonce = false; \
        if ((a).state != (a).oldstate) { \
            PDA_LocalMouse.state = mouse_default; \
            (a).oldstate = (a).state; \
        } \
    } \

#define buttonBoundsSimulated(a) \
    if (CheckBounds(a)) { \
        (a).state = button_hovered; \
        PDA_LocalMouse.state = mouse_pointer; \
        if ((a).state != (a).oldstate) { \
            PDA_PlaySound("UI/PDA/Select", "pda/soldier", 80); \
            (a).oldstate = (a).state; \
        } \
        if (PDA_LocalMouse.m1 && !(PDA_LocalMouse.oldState & BT_ATTACK)) { \
            PDA_PlaySound("UI/PDA/ChangePage", "pda/soldier", 80); \
            (a).state = button_clicked; \
        } \
    } else { \
        (a).state = button_none; \
        PDA_Local.playonce = false; \
        if ((a).state != (a).oldstate) { \
            PDA_LocalMouse.state = mouse_default; \
            (a).oldstate = (a).state; \
        } \
    } \

// Onto other stuff

#define PDA_NOPONG() \
	for (int wipeIndex = PDA_PONG_LEFTPADDLE; wipeIndex <= PDA_PONG_AISCORE; wipeIndex++) { \
		HudMessage(s:"\n"; HUDMSG_PLAIN, wipeIndex, CR_UNTRANSLATED, 0, 0, 0, 0); \
	} \

function void PDA_SetupFloatingTooltip (str graphic, str tooltip) {
    SetFont(graphic);
    int _xTemp = ((PDA_SCREEN_X + PDA_SCREEN_WIDTH) / 2) * NEW_RESOLUTION_X;
    // int _yTemp = PDA_LocalMouse.y * NEW_RESOLUTION_Y + 10;
    int _yTemp = (PDA_SCREEN_Y + 32) * NEW_RESOLUTION_Y;

    HudMessage(s:"A\n"; HUDMSG_ALPHA, PDA_TOOLTIPID, CR_UNTRANSLATED,
        _xTemp + X_LEFT_EDGE, _yTemp + Y_TOP_EDGE,
        0, 0.9);

    SetFont(PDA_FONT[0]);

    SetHudClipRect(
        PDA_SCREEN_X + 4, PDA_SCROLLABLE_Y,
        PDA_SCREEN_WIDTH * NEW_RESOLUTION_X, PDA_SCROLLABLE_HEIGHT,
        PDA_FLOATING_TOOLTIP_WRAP
    );

    // _yTemp = PDA_LocalMouse.y * NEW_RESOLUTION_Y;
    // _yTemp = PDA_LocalMouse.y * NEW_RESOLUTION_Y;

    const fixed xOffset = 10.0;
    const fixed yOffset = 10.0;

    fixed _ttX = _xTemp + xOffset + X_LEFT_EDGE;
    fixed _ttY = _yTemp + yOffset + Y_TOP_EDGE;

    HudMessage("%s:", tooltip; HUDMSG_ALPHA, PDA_TOOLTIPID - 1, CR_UNTRANSLATED, _ttX, _ttY, 0.0, 1.0);
    // PDA_SetupScreenBounds();
}

function void PDA_SetupPageTooltip (str graphic, str tooltip, float alpha) {
    SetHudClipRect(
        PDA_FLOATING_TOOLTIP_GRAPHIC_X, PDA_FLOATING_TOOLTIP_GRAPHIC_Y,
        PDA_FLOATING_TOOLTIP_GRAPHIC_WIDTH, PDA_FLOATING_TOOLTIP_GRAPHIC_HEIGHT,
        PDA_FLOATING_TOOLTIP_GRAPHIC_WRAP
    );

    SetFont(graphic);
    HudMessage(s:"A\n"; HUDMSG_ALPHA, PDA_TOOLTIPID, CR_UNTRANSLATED,
        PDA_SCREEN_X + X_LEFT_EDGE, (int)(PDA_LocalMouse.y * NEW_RESOLUTION_Y) + 20.0 + Y_TOP_EDGE,
        0, 0.9);

    SetFont(PDA_FONT[0]);
    HudMessage(s:tooltip; HUDMSG_ALPHA, PDA_TOOLTIPID - 1, CR_UNTRANSLATED,
    10.0,
    (int)(PDA_LocalMouse.y * NEW_RESOLUTION_Y) + 30.0,
    0, alpha);

    
}

// Setup scrolling arrows for pages with lots of text

function void PDA_SetScrollArrows (int scrollDownMax) {
	if (PDA_Local.scrollingY >= 0)
		DisplayIcon("RLZARU", PDA_SCROLLUPID, PDA_SCREEN_WIDTH + X_LEFT_EDGE, PDA_SCREEN_HEIGHT + Y_TOP_EDGE, 0, 0.0);
	else
		DisplayIcon("RLZARU", PDA_SCROLLUPID, PDA_SCREEN_WIDTH + X_LEFT_EDGE, PDA_SCREEN_Y + 10.0 + Y_TOP_EDGE, 0, 0.5);


	if (PDA_Local.scrollingY <= scrollDownMax)
		DisplayIcon("RLZARD", PDA_SCROLLDNID, PDA_SCREEN_WIDTH + X_LEFT_EDGE, PDA_SCREEN_HEIGHT + Y_TOP_EDGE, 0, 0.0);
	else
		DisplayIcon("RLZARD", PDA_SCROLLDNID, PDA_SCREEN_WIDTH + X_LEFT_EDGE, PDA_SCREEN_HEIGHT + Y_TOP_EDGE, 0, 0.5);
}

function void PDA_SetScrollArrows2 (int scrollDownMax, float x, float y) {
    bool notbot = PDA_Local.scrollingY > scrollDownMax;
    bool nottop = PDA_Local.scrollingY < 0;

    if (notbot) DisplayIcon("RLZARD", PDA_SCROLLDNID, x, y, 0, 0.5);
    if (nottop) DisplayIcon("RLZARU", PDA_SCROLLUPID, x, PDA_SCREEN_Y + 40.0 + Y_TOP_EDGE, 0, 0.5);
}


#define PDA_SetScrollWindow(scrollDownMax) \
	PDA_SetScrollArrows2((scrollDownMax), PDA_SCREEN_WIDTH + X_LEFT_EDGE, PDA_SCREEN_HEIGHT + Y_TOP_EDGE); \

#define PDA_UnsetScrollArrows() \
	DisplayIcon("RLZARU", PDA_SCROLLUPID, PDA_SCREEN_WIDTH + X_LEFT_EDGE, PDA_SCREEN_Y + 10.0 + Y_TOP_EDGE, 0, 0); \
	DisplayIcon("RLZARD", PDA_SCROLLDNID, PDA_SCREEN_WIDTH + X_LEFT_EDGE, PDA_SCREEN_HEIGHT + 0.0 + Y_TOP_EDGE, 0, 0); \

function PDA_ArmorData setupArmorData (int specialArmorTokens) {
    #define armorActor DRLA_ArmorList[localArmorIndex][armor_ACTOR]

    bool renegade_check = CheckActorClass(0, CheckInventory("DRPGDRLAActive") ? "DoomRLRenegadeRPG" : "DoomRLRenegade") == true;

    if (specialArmorTokens) {
        if (CheckInventory("RLEnclaveSetBonusActive")) localArmorData.langEntry = StrParam("PDA_ARMOR_%s:COMPLETE", armorActor);
        else                                           localArmorData.langEntry = StrParam("PDA_ARMOR_BOOSTED_%s:", armorActor);

        localArmorData.armorRes  = StrParam("%l:", StrParam("%l:_RES", localArmorData.langEntry));
    } else {
        localArmorData.langEntry = StrParam("PDA_ARMOR_%s:", armorActor);
        localArmorData.armorRes  = StrParam("%l:", StrParam("%l:_RES", localArmorData.langEntry));

        if (CheckInventory("PowerRLReactiveShieldSystemMelee"))
            localArmorData.armorRes = "PDA_ARMOR_REACTIVESHIELDSYSTEM_MELEE";

        if (CheckInventory("PowerRLReactiveShieldSystemBullet"))
            localArmorData.armorRes = "PDA_ARMOR_REACTIVESHIELDSYSTEM_BULLET";

        if (CheckInventory("PowerRLReactiveShieldSystemFire"))
            localArmorData.armorRes = "PDA_ARMOR_REACTIVESHIELDSYSTEM_FIRE";

        if (CheckInventory("PowerRLReactiveShieldSystemPlasma"))
            localArmorData.armorRes = "PDA_ARMOR_REACTIVESHIELDSYSTEM_PLASMA";
    }

    if (specialArmorTokens && stricmp(strLeft(DRLA_ArmorList[localArmorIndex][armor_TOKEN], 17), "RLCyberneticArmor") == 0) {
        localArmorData.name      = StrParam("%l:", "PDA_ARMOR_CYBERNETICARMOR_NAME");
        localArmorData.graphic   = StrParam("%l:", "PDA_ARMOR_CYBERNETICARMOR_ICON");
        localArmorData.armorAttr = StrParam("%l:", "PDA_ARMOR_CYBERNETICARMOR_ATTR");
        localArmorData.armorDesc = StrParam("%l:", "PDA_ARMOR_CYBERNETICARMOR_DESC");
        localArmorData.armorVal  = StrParam("%l:\n\n",
                (!renegade_check) ? "PDA_ARMOR_CYBERNETICARMOR_PROT" : "PDA_ARMOR_CYBERNETICARMOR_RENPROT");

        if (CheckInventory("RLCyberneticArmorModdedToken")) {
            if (CheckInventory("RLCyberneticArmorBulkToken"))      localArmorData.armorRes = "PDA_ARMOR_BOOSTED_CYBERNETICARMORBULK_RES";
            if (CheckInventory("RLCyberneticArmorPowerToken"))     localArmorData.armorRes = "PDA_ARMOR_BOOSTED_CYBERNETICARMORPOWER_RES";
            if (CheckInventory("RLCyberneticArmorAgilityToken"))   localArmorData.armorRes = "PDA_ARMOR_BOOSTED_CYBERNETICARMORAGILITY_RES";
            if (CheckInventory("RLCyberneticArmorTechnicalToken")) localArmorData.armorRes = "PDA_ARMOR_BOOSTED_CYBERNETICARMORTECHNICAL_RES";
            if (CheckInventory("RLCyberneticArmorSniperToken"))    localArmorData.armorRes = "PDA_ARMOR_BOOSTED_CYBERNETICARMORSNIPER_RES";
            if (CheckInventory("RLCyberneticArmorFirestormToken")) localArmorData.armorRes = "PDA_ARMOR_BOOSTED_CYBERNETICARMORFIRESTORM_RES";
            if (CheckInventory("RLCyberneticArmorNanoToken"))      localArmorData.armorRes = "PDA_ARMOR_BOOSTED_CYBERNETICARMORNANO_RES";
            if (CheckInventory("RLCyberneticArmorOnyxToken"))      localArmorData.armorRes = "PDA_ARMOR_BOOSTED_CYBERNETICARMORONYX_RES";
        }

        localArmorData.tooltip   = StrParam("%l:\n%l:\n%l:",
                (!renegade_check) ? "PDA_ARMOR_CYBERNETICARMOR_PROT" : "PDA_ARMOR_CYBERNETICARMOR_RENPROT", localArmorData.armorRes, localArmorData.armorAttr);
    } else {
        localArmorData.name      = StrParam("%l:", StrParam("%l:_NAME", localArmorData.langEntry));
        localArmorData.graphic   = StrParam("%l:", StrParam("%l:_ICON", localArmorData.langEntry));
        localArmorData.armorAttr = StrParam("%l:", StrParam("%l:_ATTR", localArmorData.langEntry));
        localArmorData.armorDesc = StrParam("%l:", StrParam("%l:_DESC", localArmorData.langEntry));
        localArmorData.armorVal  = StrParam("%l:\n\n",
                    (!renegade_check) ? StrParam("%l:_PROT", localArmorData.langEntry) 
                                      : StrParam("%l:_RENPROT", localArmorData.langEntry));
        localArmorData.tooltip   = StrParam(
            "\cdStats:\c-\n"
            "%l:\n"
            "%l:\n"
            "%l:",
            (!renegade_check) ? StrParam("%l:_PROT", localArmorData.langEntry) 
                              : StrParam("%l:_RENPROT", localArmorData.langEntry),
            localArmorData.armorRes, localArmorData.armorAttr
        );
    }

    return localArmorData;
}

function PDA_BootsData setupBootsData (void) {
    #define bootsActor DRLA_ArmorList[localBootsIndex][armor_ACTOR]

    localBootsData.langEntry = StrParam("PDA_ARMOR_%s:", bootsActor);
    localBootsData.bootsVal  = StrParam("%l:\n\n", StrParam("%l:_PROT", CheckInventory("RLEnclaveSetBonusActive") ? StrParam("PDA_ARMOR_BOOSTED_%s:", bootsActor) : localBootsData.langEntry));
    localBootsData.name      = StrParam("%l:", StrParam("%l:_NAME", localBootsData.langEntry));
    localBootsData.graphic   = StrParam("%l:", StrParam("%l:_ICON", localBootsData.langEntry));
    localBootsData.bootsAttr = StrParam("%l:", StrParam("%l:_ATTR", localBootsData.langEntry));
    localBootsData.bootsDesc = StrParam("%l:", StrParam("%l:_DESC", localBootsData.langEntry));
    localBootsData.tooltip   = StrParam(
        "\cdStats:\c-\n"
        "%l:\n\n"
        "%l:", 
        StrParam("%l:_PROT", localBootsData.langEntry), 
        localBootsData.bootsAttr
    );

    return localBootsData;
}

function PDA_BackpackData setupBackpackData (void) {
    #define backpackIndex DRLA_BackpackList[localBackpackIndex][1]

    localBackpackData.name    = StrParam("%l:", StrParam("PDA_BACKPACK_%s:_NAME", backpackIndex));
    localBackpackData.graphic = StrParam("%l:", StrParam("PDA_BACKPACK_%s:_ICON", backpackIndex));
    localBackpackData.tooltip = "";

    localBackpackData.backpackVal = StrParam("%l:", StrParam("PDA_BACKPACK_%s:_DESC", backpackIndex));

    return localBackpackData;
}

function void PDA_SetDataPerPage (void) {
    switch (PDA_Local.category) {
        case PDA_MENU:
            break;

        case PDA_CLASSES:
            int PDA_Class_TrimValue = CheckInventory("DRPGDRLAActive") ? 3 : 0;

            PDA_Class[PlayerNumber()][pda_class_name]      = StrParam("PDA_CLASS_%s:_NAME"     , StrTrim(GetActorClass(0),0,PDA_Class_TrimValue));
            PDA_Class[PlayerNumber()][pda_class_abilities] = StrParam("PDA_CLASS_%s:_ABILITIES", StrTrim(GetActorClass(0),0,PDA_Class_TrimValue));
            PDA_Class[PlayerNumber()][pda_class_story]     = StrParam("PDA_CLASS_%s:_STORY"    , StrTrim(GetActorClass(0),0,PDA_Class_TrimValue));
            PDA_Class[PlayerNumber()][pda_class_height]    = StrParam("PDA_CLASS_%s:_HEIGHT"   , StrTrim(GetActorClass(0),0,PDA_Class_TrimValue));
            PDA_Class[PlayerNumber()][pda_class_icon]      = StrParam("%l:", StrParam("PDA_CLASS_%s:_ICON", StrTrim(GetActorClass(0),0,PDA_Class_TrimValue)));
            break;

        case PDA_WEAPONS:
            player_weapon[player_weapon_current] = GetWeapon();
            player_weapon[player_weapon_trimmed] = StrTrim(player_weapon[player_weapon_current], 2, 0);
            PDA_Class[PlayerNumber()][pda_class_weapon_perk]   = StrParam("> \c[Yellow]%l:", "PDA_WEAPON_PERKUNAVAILABLE");

            weapon_checks[weapon_checks_disasemblable] = (GetActorClass(0) == "DoomRLTechnician" && !CheckInventory("RLStandardWeaponToken"));
            weapon_checks[weapon_checks_supports_artifacts] = CheckInventory(StrParam("%s:DemonArtifacts", player_weapon[player_weapon_current]));

            if (CheckInventory("RLStandardWeaponToken") || CheckInventory("RLExoticWeaponToken")) {
                PDA_Local.maxmodlimit = 4;
            }

            if (CheckInventory("RLSuperiorWeaponToken") || CheckInventory("RLBasicAssemblyTypeWeapon")) {
                PDA_Local.maxmodlimit = 2;
            }

            if (CheckInventory("RLUniqueWeaponToken") || CheckInventory("RLDemonicWeaponToken") || CheckInventory("RLLegendaryWeaponToken") || CheckInventory("RLAdvancedAssemblyTypeWeapon")) {
                if (StrCmp(GetWeapon(),"RLDuke2Rifle") == 0 || StrCmp(GetWeapon(),"RLChameleonRifle") == 0 || StrCmp(GetWeapon(),"RLWidowmakerSMG") == 0)
                    PDA_Local.maxmodlimit = 3;
                else
                    PDA_Local.maxmodlimit = 1;
            }

            if (CheckInventory("RLMasterAssemblyTypeWeapon") || CheckInventory("RLSuperiorAssembledWeaponToken")) {
                PDA_Local.maxmodlimit = 0;
            }

            // Checks for player perks that influence weapons
            for (int perkIndex = 0; perkIndex < DRLA_WEAPONPERKMAX; perkIndex++) {
                if (CheckInventory(DRLA_WeaponPerkList[perkIndex][0]) && CheckInventory(DRLA_WeaponPerkList[perkIndex][2])) {
                    PDA_Class[PlayerNumber()][pda_class_weapon_perk] = StrParam("> \c[Yellow]%s:", DRLA_WeaponPerkList[perkIndex][1]);
                }
            }
            // Checks for unique weapon + armor set perks
            // I should get a better name for this loop's max at some point..
            for (int setPerkIndex = 0; setPerkIndex < DRLA_NUCLEARMAX; setPerkIndex++) {
                if (CheckInventory(DRLA_WeaponSetList[setPerkIndex][0]) && (player_weapon[player_weapon_current] == DRLA_NuclearCheckList[setPerkIndex])) {
                    weapon_info[weapon_info_perk] = StrParam("> \c[Yellow]%s:", DRLA_WeaponSetList[0][1]);
                }
                if (CheckInventory("RLCerberusSetBonusActive") && (player_weapon[player_weapon_current] == DRLA_TristarCheckList[setPerkIndex])) {
                    weapon_info[weapon_info_perk] = StrParam("> \c[Yellow]%s:", DRLA_WeaponSetList[1][1]);
                }
            }

            if (stricmp(player_weapon[player_weapon_current], "None") != 0) {
                weapon_info[weapon_info_desc] = StrParam("PDA_WEAPON_%s:_DESC", player_weapon[player_weapon_trimmed]);
                weapon_info[weapon_info_dualdesc] = StrParam("PDA_WEAPON_%s:DEMONARTIFACTS_DESC", player_weapon[player_weapon_trimmed]);

                str_split(separator_character, StrParam("%l:", StrParam("PDA_WEAPON_%s:_MODS", player_weapon[player_weapon_trimmed])));
            }
            break;
            
        case PDA_BESTIARY:
            break;
        case PDA_ARMORS:
            bool specialArmorTokens   = checkSpecialArmorTokens();
            localArmorData            = setupArmorData(specialArmorTokens);
            localBootsData            = setupBootsData();
            localBackpackData         = setupBackpackData();
            // bool isRenegade = (CheckActorClass(0, CheckInventory("DRPGDRLAActive") ? "DoomRLRenegadeRPG" : "DoomRLRenegade") == true);
            switch (PDA_Local.page) {
                case EQUIPMENT_PAGE_ONHAND:
                    break;
                case EQUIPMENT_PAGE_INFO:
                    // No point to this in the detail info, I guess
                    localArmorData.tooltip    = "";
                    localBootsData.tooltip    = "";
                    localBackpackData.tooltip = "";

                    localShowArmor    = (localEqBoolField & 1);
                    localShowBoots    = (localEqBoolField & 1<<1);
                    localShowBackpack = (localEqBoolField & 1<<2);
                    break;
            }
            break;

        case PDA_ASSEMBLIES:
            switch (PDA_Local.page) {
                case ASSEMBLY_PAGE_BASIC:
                    PDA_Local.maxassembliesper = (advanced_offset - 1);
                    PDA_Local.assemblyOffset   = basic_offset;
                    PDA_Local.tiercolor        = "\c[BB]";
                    break;
                case ASSEMBLY_PAGE_ADVANCED:
                    PDA_Local.maxassembliesper = (master_offset - 1) - advanced_offset;
                    PDA_Local.assemblyOffset   = advanced_offset;
                    PDA_Local.tiercolor        = "\c[AB]";
                    break;
                case ASSEMBLY_PAGE_MASTER:
                    PDA_Local.maxassembliesper = master_max - master_offset;
                    PDA_Local.assemblyOffset   = master_offset;
                    PDA_Local.tiercolor        = "\c[MB]";
                    break;
                default:
                    Print(s:"how da fuk");
                    break;
            }
            break;

        case PDA_HELP:
            break;
        case PDA_MISC:
            break;

        case PDA_ITEMS:
            if (GetCvar("DRLA_specialstarts") != 2)
            {
                PDA_Local.pagemax = DRLA_GROUPQUANTITY;
            }
            break;
        case PDA_ASSEMBLY_DETAIL:
            if (stricmp(PDA_Local.detailFetch[0], "null") != 0) {
                PDA_AssemblyInfo[PlayerNumber()][0]  = StrParam("%s:_ICON",   PDA_Local.detailFetch[0]);
                PDA_AssemblyInfo[PlayerNumber()][1]  = StrParam("%s:_NAME",   PDA_Local.detailFetch[0]);
                PDA_AssemblyInfo[PlayerNumber()][2]  = StrParam("%s:_MODS",   PDA_Local.detailFetch[0]);
                PDA_AssemblyInfo[PlayerNumber()][3]  = StrParam("%s:_DESC",   PDA_Local.detailFetch[0]);
                PDA_AssemblyInfo[PlayerNumber()][4] = StrParam("%s:_HEIGHT", PDA_Local.detailFetch[0]);
            }
            break;
        case PDA_BESTIARY_DETAIL:
            if (stricmp(PDA_Local.detailFetch[0], "null") != 0) {
                enemy_count       = PDA_Local.detailFetch[1];
                PDA_Enemy[PlayerNumber()][enemy_name]   = StrParam("%s:_NAME",       PDA_Local.detailFetch[0]);
                PDA_Enemy[PlayerNumber()][enemy_icon]   = StrParam("%s:_ICON",       PDA_Local.detailFetch[0]);
                PDA_Enemy[PlayerNumber()][enemy_health] = StrParam("%s:_HEALTH",     PDA_Local.detailFetch[0]);
                PDA_Enemy[PlayerNumber()][enemy_resistance]    = StrParam("%s:_RESISTANCE", PDA_Local.detailFetch[0]);
                PDA_Enemy[PlayerNumber()][enemy_misc]   = StrParam("%s:_MISC",       PDA_Local.detailFetch[0]);
            }
            break;
        case PDA_CREDITS:
            break;
    }
}

function void PDA_ChangeScrolling (void) {
    switch (PDA_Local.category) {
        case PDA_MENU:
            PDA_SetScrollLimit(-90);
            PDA_SetScrollArrows2(-30, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
            break;

        case PDA_CLASSES:
            switch (PDA_Local.page) {
                case CLASSES_PAGE_PERKS:
                    PDA_SetScrollLimit(20);
                    break;
                case CLASSES_PAGE_STORY:
                    // PDA_SetScrollLimit(-1 * batoi(StrParam("%l:", PDA_Class[PlayerNumber()][pda_class_height])));
                    // PDA_SetScrollArrows2(-1 * batoi(StrParam("%l:", PDA_Class[PlayerNumber()][pda_class_height])), PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
                    PDA_SetScrollLimit(120);
                    PDA_SetScrollArrows2(120, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
                    break;
            }
            break;

        case PDA_WEAPONS:
            switch (PDA_Local.page) {
                case WEAPON_PAGE_STORY:
                    PDA_SetScrollLimit(-50);
                    break;
                case WEAPON_PAGE_MODPACK_EFFECTS:
                    PDA_SetScrollLimit(-30);
                    PDA_SetScrollArrows2(-30, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
                    break;
                case WEAPON_PAGE_ARTIFACT_EFFECTS:
                    PDA_SetScrollLimit(-80);
                    PDA_SetScrollArrows2(-80, PDA_SCREEN_WIDTH + 50.0, PDA_SCROLLABLE_HEIGHT + 90.0);
                    break;
            }
            break;
            
        case PDA_BESTIARY:
            PDA_SetScrollLimit(-240);
            PDA_SetScrollWindow(-240);

            switch (PDA_Local.page) {
                case BESTIARY_PAGE_DIFFICULTIES:
                    PDA_SetScrollLimit(20);
                    PDA_SetScrollArrows2(0, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
                    break;
                default: 
                    PDA_SetScrollLimit(DRLA_MONSTER_PAGE_MAX * -10);
                    PDA_SetScrollArrows2(DRLA_MONSTER_PAGE_MAX * -10, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
                    break;
            }
            break;
        case PDA_ARMORS:
            switch (PDA_Local.page) {
                case EQUIPMENT_PAGE_ONHAND:
                    if (localHasBackpack) {
                        PDA_SetScrollLimit(-140);
                        PDA_SetScrollArrows2(-140, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
                    } else {
                        PDA_SetScrollLimit(-80);
                        PDA_SetScrollArrows2(-80 , PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
                    }
                    break;
                case EQUIPMENT_PAGE_INFO:
                    PDA_SetScrollLimit(-160);
                    PDA_SetScrollArrows2(-160, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
                    break;
            }
            break;

        case PDA_ASSEMBLIES:
            int scrollOffset = -8 * PDA_Local.maxassembliesper;
            PDA_SetScrollLimit  (scrollOffset);
            PDA_SetScrollArrows2(scrollOffset, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
            break;

        case PDA_HELP:
            PDA_SetScrollLimit(-100);
            break;
        case PDA_MISC:
            PDA_SetScrollLimit(0);
            PDA_SetScrollArrows2(0, PDA_SCREEN_WIDTH + 50.0, PDA_SCROLLABLE_HEIGHT + 90.0);
            break;

        case PDA_ITEMS:
            PDA_SetScrollLimit(-200);
            PDA_SetScrollArrows2(-200, PDA_SCREEN_WIDTH + 50.0, PDA_SCROLLABLE_HEIGHT + 90.0);
            break;
        case PDA_ASSEMBLY_DETAIL:
            PDA_SetScrollLimit  (-100);
            PDA_SetScrollArrows2(-100, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
            break;
        case PDA_BESTIARY_DETAIL:
            if (stricmp(PDA_Local.detailFetch[0], "null") != 0) {
                PDA_SetScrollLimit(-100);
                PDA_SetScrollArrows2(-100, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);
            } else {
                PDA_SetScrollLimit(0);
            }
            break;
        case PDA_CREDITS:
            PDA_SetScrollWindow(0);
            break;
    }
}

function void PDA_OnChange (void) {
    afterPageDefaults("PDA_OnChange");
    PDA_ChangeScrolling();
    PDA_SetDataPerPage();
}

function void PDA_SetCategory (int category) {
    afterPageDefaults("PDA_SetCategory start");
    if (PDA_Local.category == category) {
        return;
    }

    if (category == PDA_CREDITS) {
        PDA_Local.creditsroll = 120;
    }

    if (PDA_Local.category == PDA_PONG) {
        PDA_NOPONG();
        PDA_Local.pongrunning = false;
    }

    PDA_Local.texty = 0.0;
    PDA_Local.scrollingY = PDA_SCREEN_Y;
    PDA_Local.category = category;
    afterPageDefaults("PDA_SetCategory end");
    PDA_OnChange();
}


function void PDA_SetPage (int page_num) {
    PDA_Local.page = page_num;
    afterPageDefaults("PDA_SetPage");
    PDA_OnChange();
}

function void PDA_HasEquipment (void) {
    bool specialArmorTokens = checkSpecialArmorTokens();

    // Normal
    for (int armorIndex = 0; armorIndex < DRLA_ARMORMAX; armorIndex++) {
        if (CheckInventory(StrParam("%s:Token", DRLA_ArmorList[armorIndex][armor_TOKEN]))) {
            if (StrCmp(DRLA_ArmorList[armorIndex][armor_TOKEN], StrParam("%s:Boots", StrTrim(DRLA_ArmorList[armorIndex][armor_TOKEN],0,5))) != 0) {
                localArmorIndex = armorIndex;
                localHasArmor = true;
            } else {
                localBootsIndex = armorIndex;
                localHasBoots = true;
            }
        }
        if (!CheckInventory(StrParam("%s:Token", DRLA_ArmorList[localArmorIndex][armor_TOKEN]))) {
            localArmorIndex = 0;
            localHasArmor = false;
        }
        if (!CheckInventory(StrParam("%s:Token", DRLA_ArmorList[localBootsIndex][armor_TOKEN]))) {
            localBootsIndex = 0;
            localHasBoots = false;
        }
    }

    for (int bp_i = 0; bp_i < DRLA_BACKPACKMAX; bp_i++) {
        if (CheckInventory(DRLA_BackpackList[bp_i][0])) {
            localBackpackIndex = bp_i;
            localHasBackpack = true;
        } else if (!CheckInventory(DRLA_BackpackList[localBackpackIndex][0])) {
            localHasBackpack = false;
        }
    }
}

// ENTER YE BUTTON CREATION


/**
 * @name: Create PDA Menu button
 * @param: int id  The ID of the button
 * @param: str label  The button's label that's displayed
 * @param: str graphic  The graphic used
 * @param: float x  Button X co-ordinate
 * @param: float y  Button Y co-ordinate
 * @param: int width  Button width
 * @param: int height  Button height
 */

// !! When debugging button hitboxes via DrawBorder, remember to multiply X, Y, W, H with matching NEW_RESOLUTION_ variables !!

function PDAButton PDA_CreateMenuButton (int id, str label, str graphic, float x, float y, int width, int height) {
    #define thisButton PDA_LocalButton[id]
    assignButtonParams(thisButton, label)
    // buttonBoundsDefault(thisButton)

    // Expand upon default bounds check with additional functionality
    // if (CheckBounds(thisButton)) {
    //     if (PDA_LocalMouse.m1 && !(PDA_LocalMouse.oldState & BT_ATTACK)) {
    //         PDA_ResetScroll();
    //     }
    // }


    fixed xlabeloff = (strcmp(thisButton.graphic, "PTAB") == 0) ? 4.0 : 0.0;
    fixed ylabeloff = (strcmp(thisButton.graphic, "PTAB") == 0) ? 3.0 : 0.0;

    thisButton.graphic      = graphic;
    thisButton.graphicFlags = HUDMSG_ALPHA;
    thisButton.graphicID    = thisButton.id;
    int _gfxTemp            = thisButton.x * NEW_RESOLUTION_X;
    thisButton.graphicX     = _gfxTemp + X_LEFT_EDGE;
    int _gfyTemp            = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.graphicY     = _gfyTemp + 10.0;
    thisButton.type         = "menu";

    thisButton.textFont     = PDA_FONT[2];
    thisButton.textFlags    = HUDMSG_ALPHA;
    thisButton.textID       = thisButton.graphicID + 20;
    thisButton.textX        = thisButton.graphicX + (xlabeloff * NEW_RESOLUTION_X);
    int _tyTemp             = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.textY        = _tyTemp + (ylabeloff * NEW_RESOLUTION_Y);

    if (debug) {
        DrawBorder(thisButton.x * NEW_RESOLUTION_X, thisButton.y * NEW_RESOLUTION_Y, width * NEW_RESOLUTION_X, height * NEW_RESOLUTION_Y);
    }
    return thisButton;
}

function PDAButton PDA_CreateTab (int id, str label, str graphic, float x, float y, int width, int height) {
    #define thisButton PDA_LocalButton[id]
    assignButtonParams(thisButton, label)
    // buttonBoundsDefault(thisButton)

    thisButton.y       = PDA_SCREEN_Y + y + Y_TOP_EDGE; // Override as this isn't meant to scroll
    thisButton.alpha   = 0.6;

    fixed xlabeloff = (strcmp(graphic, "PTAB") == 0) ? 6.0 : 0.0;
    fixed ylabeloff = (strcmp(graphic, "PTAB") == 0) ? 7.0 : 0.0;

    thisButton.graphic      = graphic;
    thisButton.graphicFlags = HUDMSG_ALPHA;
    thisButton.graphicID    = thisButton.id;
    int _gxTemp             = thisButton.x * NEW_RESOLUTION_X;
    thisButton.graphicX     = _gxTemp + X_LEFT_EDGE;
    int _gyTemp             = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.graphicY     = _gyTemp + Y_TOP_EDGE;
    thisButton.type         = "tab";

    thisButton.textFont     = PDA_FONT[2];
    thisButton.textFlags    = HUDMSG_ALPHA;
    thisButton.textID       = thisButton.graphicID + 10;
    thisButton.textX       = (int)thisButton.graphicX + xlabeloff;
    thisButton.textY       = (int)thisButton.graphicY + ylabeloff;

    if (debug) {
        int x = thisButton.x * NEW_RESOLUTION_X,
            y = thisButton.y * NEW_RESOLUTION_Y,
            w = width        * NEW_RESOLUTION_X,
            h = height       * NEW_RESOLUTION_Y;
        DrawBorder(x, y, w, h);
    }

    return thisButton;
}

function PDAButton PDA_CreateButton (int id, str label, str graphic, float x, float y, int width, int height, float gw, float gh) {
    #define thisButton PDA_LocalButton[id]
    assignButtonParams(thisButton, label)
    // buttonBoundsDefault(thisButton)

    const float X_MARGIN = 1.0;

    thisButton.graphic      = graphic;
    thisButton.graphicFlags = HUDMSG_ALPHA;
    thisButton.graphicID    = thisButton.id;
    int _gxTemp             = thisButton.x * NEW_RESOLUTION_X;
    thisButton.graphicX     = _gxTemp + X_LEFT_EDGE;
    int _gyTemp             = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.graphicY     = PDA_SCREEN_Y + _gyTemp - (int)(gh / 2);
    thisButton.type         = "generic";

    thisButton.textFont     = PDA_FONT[2];
    thisButton.textFlags    = HUDMSG_ALPHA;
    thisButton.textID       = thisButton.graphicID + 20;
    int _fxTemp             = (int)thisButton.graphicX + (gw + X_MARGIN) * NEW_RESOLUTION_X;
    thisButton.textX       = _fxTemp + X_LEFT_EDGE;
    thisButton.textY       = thisButton.graphicY;

    if (debug) {
        int x = thisButton.x * NEW_RESOLUTION_X,
            y = thisButton.y * NEW_RESOLUTION_Y,
            w = width        * NEW_RESOLUTION_X,
            h = height       * NEW_RESOLUTION_Y;
        DrawBorder(x, y, w, h);
    }
    return thisButton;
}

function PDAButton PDA_CreateFixedButton (int id, str label, str graphic, float x, float y, int width, int height, float gw, float gh) {
    #define thisButton PDA_LocalButton[id]
    assignButtonParams(thisButton, label)
    // buttonBoundsDefault(thisButton)
    thisButton.y = y;

    const float X_MARGIN = 1.0;

    thisButton.graphic      = graphic;
    thisButton.graphicFlags = HUDMSG_ALPHA;
    thisButton.graphicID    = thisButton.id;
    int _gxTemp             = thisButton.x * NEW_RESOLUTION_X;
    thisButton.graphicX     = _gxTemp + X_LEFT_EDGE;
    int _gyTemp             = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.graphicY     = PDA_SCREEN_Y + _gyTemp - (int)(gh / 2);
    thisButton.type         = "generic";

    thisButton.textFont     = PDA_FONT[2];
    thisButton.textFlags    = HUDMSG_ALPHA;
    thisButton.textID       = thisButton.graphicID + 20;
    int _fxTemp             = (int)thisButton.graphicX + (gw + X_MARGIN) * NEW_RESOLUTION_X;
    thisButton.textX       = _fxTemp + X_LEFT_EDGE;
    thisButton.textY       = thisButton.graphicY;

    if (debug) {
        int x = thisButton.x * NEW_RESOLUTION_X,
            y = thisButton.y * NEW_RESOLUTION_Y,
            w = width        * NEW_RESOLUTION_X,
            h = height       * NEW_RESOLUTION_Y;
        DrawBorder(x, y, w, h);
    }
    return thisButton;
}

function PDAButton PDA_CreateAssemblyButton (int id, str graphic, str label, float x, float y, int width, int height, str assembly, str tooltip) {
    #define thisButton PDA_LocalButton[id]
    assignButtonParams(thisButton, label)

    const int X_MARGIN = 12.0;

    thisButton.graphic      = graphic;
    thisButton.graphicFlags = HUDMSG_ALPHA;
    thisButton.graphicID    = thisButton.id;
    int _gxTemp             = thisButton.x * NEW_RESOLUTION_X;
    thisButton.graphicX     = _gxTemp + X_LEFT_EDGE;
    int _gyTemp             = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.graphicY     = _gyTemp + 20.0;
    thisButton.type         = "assembly";

    thisButton.textFont  = PDA_FONT[0];
    thisButton.textFlags = HUDMSG_ALPHA;
    thisButton.textID    = thisButton.id + 1;
    int _fxTemp          = thisButton.graphicX * NEW_RESOLUTION_X;
    thisButton.textX     = _fxTemp + X_MARGIN + X_LEFT_EDGE;
    int _fyTemp          = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.textY     = _fyTemp + 4.0;

    thisButton.tooltip = tooltip;
    if (CheckBounds(thisButton)) {
        if (PDA_LocalMouse.m1 && !(PDA_LocalMouse.oldState & BT_ATTACK)) {
            if (assembly) PDA_Local.detailFetch[0] = assembly;

            if (strCmp(PDA_Local.detailFetch[0], "") != 0 ) {
                PDA_SetCategory(PDA_ASSEMBLY_DETAIL);
            }
        }

        // Open tooltip
        // if (strCmp(thisButton.tooltip, "") != 0 && strCmp(assembly, "") != 0) {
            // PDA_SetupFloatingTooltip("PTIPM", thisButton.tooltip);
            
        // }
    }

    if (debug) {
        DrawBorder(thisButton.x * NEW_RESOLUTION_X, thisButton.y * NEW_RESOLUTION_Y, width * NEW_RESOLUTION_X, height * NEW_RESOLUTION_Y);
    }
    return thisButton;
}

function PDAButton PDA_CreateBeastButton (int id, str label, int color, float x, float y, int width, int height, float xoff, float yoff, str beast, str unatcokillphrase) {
    #define thisButton PDA_LocalButton[id]
    assignButtonParams(thisButton, label)
    thisButton.graphic = "";

    // buttonBoundsDefault(thisButton)

    if (CheckBounds(thisButton)) {
        if (PDA_LocalMouse.m1 && !(PDA_LocalMouse.oldState & BT_ATTACK)) {
            if (strcmp(beast, "") != 0 && PDA_Local.page < 6) {
                PDA_Local.detailFetch[0] = beast;
                PDA_Local.detailFetch[1] = unatcokillphrase;

                PDA_SetCategory(PDA_BESTIARY_DETAIL);
            }
        }
    }

    thisButton.alpha = (thisButton.state == button_hovered) ? 1 : 0.6;

    thisButton.graphic      = "PLON";
    thisButton.graphicFlags = HUDMSG_ALPHA;
    thisButton.graphicID    = thisButton.id;
    int _gfxTemp            = thisButton.x * NEW_RESOLUTION_X;
    thisButton.graphicX     = _gfxTemp + 5.0 + X_LEFT_EDGE;
    int _gfyTemp            = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.graphicY     = _gfyTemp;
    thisButton.type         = "beast";

    thisButton.textFont  = PDA_FONT[0];
    thisButton.textFlags = HUDMSG_ALPHA | HUDMSG_COLORSTRING;
    thisButton.textColor = color;
    thisButton.textID    = (thisButton.id) + 20;
    int _txTemp          = thisButton.x * NEW_RESOLUTION_X;
    thisButton.textX     = _txTemp + 10.0 + X_LEFT_EDGE;
    int _tyTemp          = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.textY     = _tyTemp + 2.0;

    if (debug) {
        DrawBorder(thisButton.x * NEW_RESOLUTION_X, thisButton.y * NEW_RESOLUTION_Y, width * NEW_RESOLUTION_X, height * NEW_RESOLUTION_Y);
    }

    return thisButton;
}

function PDAButton PDA_CreateHUDButton (int id, str label, str color, float x, float y, int width, int height, float xoff, float yoff, str chosenhud) {
    #define thisButton PDA_LocalButton[id]
    assignButtonParams(thisButton, label)
    // buttonBoundsDefault(thisButton)

    // if (CheckBounds(thisButton)) {
    //     if (PDA_LocalMouse.m1 && !(PDA_LocalMouse.oldState & BT_ATTACK)) {
    //         if (strcmp(chosenhud, "") != 0 ) {
    //             TODO: Don't set category, but instead take and give the necessary tokens
    //             for (int h = 0; h < PDA_LocalHUD, h++) {
    //                 SetInventory(playerSelectedHUD[h], 0)
    //             }
    //             SetInventory(playerSelectedHUD[chosenhud], 1);
    //         }
    //     }
    // }

    thisButton.alpha = (thisButton.state == button_hovered) ? 1 : 0.6;

    thisButton.graphic      = "PLON";
    thisButton.graphicFlags = HUDMSG_ALPHA;
    thisButton.graphicID    = thisButton.id;
    thisButton.graphicX     = (thisButton.x * NEW_RESOLUTION_X) + 5.0;
    int _gyTemp             = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.graphicY     = _gyTemp + X_LEFT_EDGE;
    thisButton.type         = "hud";

    thisButton.textFont  = PDA_FONT[0];
    thisButton.textFlags = HUDMSG_ALPHA | HUDMSG_COLORSTRING;
    thisButton.textID    = (thisButton.id) + 20;
    thisButton.textX    = (thisButton.x * NEW_RESOLUTION_X) + 10.0;
    int _tyTemp          = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.textY    = _tyTemp + 4.0 + X_LEFT_EDGE;

    if (debug) {
        DrawBorder(thisButton.x * NEW_RESOLUTION_X, thisButton.y * NEW_RESOLUTION_Y, width * NEW_RESOLUTION_X, height * NEW_RESOLUTION_Y);
    }
    return thisButton;
}

// function PDAButton PDA_DisplayArmor (int id, str label, str graphic, float x, float y, int width, int height, str tooltip, fixed opacity) {
function PDAButton PDA_DisplayArmor (int id, int structType, float x, float y, int height, fixed opacity) {
    #define thisButton PDA_LocalButton[id]

    str label   = "";
    str graphic = "";
    str tooltip = "";
    int width   = 150;
    bool specialArmorTokens = checkSpecialArmorTokens();
    assignButtonParams(thisButton, label)

    switch (structType) {
        case ARMOR_DATA:
            localArmorData = setupArmorData(specialArmorTokens);
            label          = localArmorData.name; 
            graphic        = localArmorData.graphic;
            width          = strLen(localArmorData.name) * 5;
            tooltip        = localArmorData.tooltip;
            break;
        case BACKPACK_DATA:
            localBackpackData = setupBackpackData();
            label             = localBackpackData.name; 
            graphic           = localBackpackData.graphic;
            width             = strLen(localBackpackData.name) * 5;
            tooltip           = localBackpackData.tooltip;
            break;
        case BOOTS_DATA:
            localBootsData = setupBootsData();
            label          = localBootsData.name; 
            graphic        = localBootsData.graphic;
            width          = strLen(localBootsData.name) * 5;
            tooltip        = localBootsData.tooltip;
            break;
    }

    thisButton.label   = label;
    thisButton.tooltip = tooltip;
    thisButton.width   = width;
    thisButton.graphic = StrParam("%l:", graphic);

    if (CheckBounds(thisButton) && strCmp(thisButton.tooltip, "") != 0 && PDA_Local.page != EQUIPMENT_PAGE_INFO) {
        PDA_SetupFloatingTooltip("PTIP", thisButton.tooltip);
    }

    thisButton.graphicFlags = HUDMSG_ALPHA;
    thisButton.graphicID    = thisButton.id;
    int _gfxTemp            = thisButton.x * NEW_RESOLUTION_X;
    thisButton.graphicX     = _gfxTemp - 5.0 + X_LEFT_EDGE;
    int _gfyTemp            = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.graphicY     = _gfyTemp + Y_TOP_EDGE;
    thisButton.type         = "armor";

    thisButton.textFont  = PDA_FONT[1];
    thisButton.textFlags = HUDMSG_ALPHA;
    thisButton.textID    = (thisButton.id) + 1;
    int _fxTemp          = thisButton.x * NEW_RESOLUTION_X;
    thisButton.textX     = _fxTemp + 35.0 + X_LEFT_EDGE;
    int _fyTemp          = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.textY     = _fyTemp + (height / 2);
    thisButton.alpha     = opacity;

    if (debug) {
        DrawBorder(thisButton.x * NEW_RESOLUTION_X, thisButton.y * NEW_RESOLUTION_Y, width * NEW_RESOLUTION_X, height * NEW_RESOLUTION_Y);
    }
    return thisButton;
}

function PDAButton PDA_DisplayArmorOverride (int id, PDA_ArmorData override, float x, float y, int height, fixed opacity) {
    #define thisButton PDA_LocalButton[id]

    str label = override.name;
    int width = strLen(label) * 5;

    assignButtonParams(thisButton, thisButton.label)

    thisButton.label   = override.name;
    thisButton.width   = width;
    thisButton.tooltip = override.tooltip;
    thisButton.graphic = StrParam("%l:", override.graphic);

    // log("PDA_DisplayArmorOverride tooltip %s:", thisButton.tooltip);
    if (CheckBounds(thisButton) && strCmp(thisButton.tooltip, "") != 0) {
        PDA_SetupFloatingTooltip("PTIP", thisButton.tooltip);
    }

    thisButton.alpha = opacity;

    thisButton.graphicFlags = HUDMSG_ALPHA;
    thisButton.graphicID    = thisButton.id;
    int _gfxTemp            = thisButton.x * NEW_RESOLUTION_X;
    thisButton.graphicX     = _gfxTemp - 5.0 + X_LEFT_EDGE;
    int _gfyTemp            = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.graphicY     = _gfyTemp + Y_TOP_EDGE;
    thisButton.type         = "armor";

    thisButton.textFont  = PDA_FONT[1];
    thisButton.textFlags = HUDMSG_ALPHA;
    thisButton.textID    = (thisButton.id) + 1;
    int _fxTemp          = thisButton.x * NEW_RESOLUTION_X;
    thisButton.textX     = _fxTemp + 35.0 + X_LEFT_EDGE;
    int _fyTemp          = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.textY     = _fyTemp + (height / 2);
    thisButton.alpha = opacity;

    if (debug) {
        DrawBorder(thisButton.x * NEW_RESOLUTION_X, thisButton.y * NEW_RESOLUTION_Y, width * NEW_RESOLUTION_X, height * NEW_RESOLUTION_Y);
    }
    return thisButton;
}

function PDAButton PDA_CreateModPackDisplay (int id, str graphic, float x, float y, int width, int height, fixed alpha) {
    #define thisButton PDA_LocalButton[id]
    assignButtonParams(thisButton, StrParam("%l:", stringArray[id]))

    thisButton.graphic      = graphic;
    thisButton.graphicFlags = HUDMSG_ALPHA;
    thisButton.graphicID    = PDA_ASSEMBLY_ID_END + PDA_MODMAX + thisButton.id;
    int _gfxTemp            = thisButton.x * NEW_RESOLUTION_X + 15.0;
    thisButton.graphicX     = _gfxTemp + X_LEFT_EDGE;
    int _gfyTemp            = thisButton.y * NEW_RESOLUTION_Y;
    thisButton.graphicY     = _gfyTemp + Y_TOP_EDGE;
    thisButton.type         = "modpack";

    thisButton.textFlags = HUDMSG_ALPHA;
    thisButton.textFont  = PDA_FONT[0];
    thisButton.textID    = PDA_ASSEMBLY_ID_END + thisButton.id;
    int _fxTemp          = thisButton.graphicX;
    thisButton.textX     = _fxTemp + 5.0 + X_LEFT_EDGE;
    int _fyTemp          = thisButton.graphicY;
    thisButton.textY     = _fyTemp + 2.0 + Y_TOP_EDGE;

    thisButton.alpha = alpha;

    if (debug) {
        DrawBorder(thisButton.x * NEW_RESOLUTION_X, thisButton.y * NEW_RESOLUTION_Y, width * NEW_RESOLUTION_X, height * NEW_RESOLUTION_Y);
    }

    // SetFont(thisButton.textFont);
    // HudMessage("%l:", stringArray[id]; thisButton.textFlags, PDA_ASSEMBLY_ID_END + id, CR_UNTRANSLATED, 
    //     thisButton.textX, thisButton.textY,
    //     0.0, 1.0);
    return thisButton;
}

/**
 * @name: Initialize PDA Button
 * @param: PDAButton button
 * @param: int incat
 * @param: int catpage
 * @param: str message
 * @desc: Takes a given PDAButton declaration, then registers events and functionality for it.
 */
function void PDA_InitButton (PDAButton button, int incat, int catpage, str message, int onlyVisual) {
    if (button.type != "tab") {
        
    } else {
        // PDA_SetupHeaderBounds();

        if (incat > 0 && PDA_Local.page == catpage) {
            button.state = button_hovered;
            button.oldstate = button_hovered;
            button.alpha = 1;
        }
    }

    buttonBoundsDefault(button);
    if (!onlyVisual) {
        switch (button.state) {
            case button_clicked:
                if (!incat) {
                    PDA_SetCategory(catpage);
                    if (PDA_Local.category != PDA_ASSEMBLY_DETAIL) {
                        PDA_SetPage(1);
                        PDA_LocalMouse.state = mouse_default;
                        PDA_LocalMouse.oldstate = PDA_LocalMouse.state;
                    }
                }
                if (incat) {
                    if (PDA_Local.category != 0 && PDA_Local.page >= 0) {
                        PDA_SetPage(catpage);
                        PDA_Local.scrollingY = 20.0;
                        PDA_LocalMouse.state = mouse_default;
                        PDA_LocalMouse.oldstate = PDA_LocalMouse.state;
                    }
                }
                break;
            case button_hovered:
                if (strcmp(message, "") != 0) {
                    // SetFont(PDA_FONT[2]);
                    // SetHudClipRect(
                    //     PDA_MENU_TOOLTIP_X,     PDA_MENU_TOOLTIP_Y,
                    //     PDA_MENU_TOOLTIP_WIDTH, PDA_MENU_TOOLTIP_HEIGHT,
                    //     PDA_MENU_TOOLTIP_WIDTH
                    // );
                    // HudMessage(s:message; HUDMSG_PLAIN, PDA_CAT_DESCRIPTION, CR_UNTRANSLATED,
                    // PDA_MENU_TOOLTIP_X + X_LEFT_EDGE, PDA_MENU_TOOLTIP_Y + Y_TOP_EDGE, 0);
                    
                }
                break;
        }
    }

    // Handle the button rendering here
    if (button.type == "assembly") {
        if (button.tooltip != "???") {
            button.alpha = (button.state == button_hovered) ? pulser(2.0, 0.8) : 0.6;
        } else {
            button.alpha = 1.0;
        }
    } else {
        if (button.type != "tab" && button.type != "armor") {
            button.alpha = (button.state == button_hovered) ? pulser(2.0, 0.8) : 0.6;
        }
    }

    fixed xlabeloff = (strcmp(button.graphic, "PTAB") == 0) ? 4.0 : 0.0;
    fixed ylabeloff = (strcmp(button.graphic, "PTAB") == 0) ? 3.0 : 0.0;

    PrintSpriteAlpha(button.graphic, button.graphicID, button.graphicX, button.graphicY, 0, button.alpha);

    SetFont(button.textFont);
    HudMessage(s:button.label; button.textFlags, button.textID, CR_UNTRANSLATED, button.textX, button.textY, 1.0, button.alpha);
}
function void PDA_ButtonHandler (int id, int incat, int catpage, str message, bool onlyVisual, bool clear) {
    if (PDA_LocalButton[id].type == "tab") {
        PDA_SetupHeaderBounds();

        if (incat > 0 && PDA_Local.page == catpage) {
            PDA_LocalButton[id].state = button_hovered;
            PDA_LocalButton[id].alpha = 1;
        }
    }

    if (!onlyVisual) {
        buttonBoundsDefault(PDA_LocalButton[id]);

        switch (PDA_LocalButton[id].state) {
            case button_clicked:
                if (!incat) {
                    if (PDA_LocalButton[id].type != "armor") PDA_SetCategory(catpage);
                    if (PDA_Local.category != PDA_ASSEMBLY_DETAIL) {
                        if (PDA_LocalButton[id].type != "armor") PDA_SetPage(1);
                        PDA_LocalMouse.state = mouse_default;
                        PDA_LocalMouse.oldstate = PDA_LocalMouse.state;
                    }
                }
                if (incat) {
                    if (PDA_Local.category != 0 && PDA_Local.page >= 0) {
                        if (PDA_LocalButton[id].type != "armor") {
                            PDA_SetPage(catpage);
                            PDA_Local.scrollingY = 20.0;
                        }
                        PDA_LocalMouse.state = mouse_default;
                        PDA_LocalMouse.oldstate = PDA_LocalMouse.state;
                    }
                }
                break;
            case button_hovered:
                if (strcmp(message, "") != 0) {
                    SetFont(PDA_FONT[2]);
                    SetHudClipRect(
                        PDA_MENU_TOOLTIP_X,     PDA_MENU_TOOLTIP_Y,
                        PDA_MENU_TOOLTIP_WIDTH, PDA_MENU_TOOLTIP_HEIGHT,
                        PDA_MENU_TOOLTIP_WIDTH
                    );
                    HudMessage(s:message; HUDMSG_PLAIN, PDA_CAT_DESCRIPTION + id, CR_UNTRANSLATED, PDA_MENU_TOOLTIP_X + X_LEFT_EDGE, PDA_MENU_TOOLTIP_Y + Y_TOP_EDGE, 0);
                    PDA_SetupScreenBounds_Wipeless();
                }
                break;
        }
    }

    // Handle the button rendering here
    if (PDA_LocalButton[id].type == "assembly") {
        if (PDA_LocalButton[id].tooltip != "???") {
            PDA_LocalButton[id].alpha = (PDA_LocalButton[id].state == button_hovered) ? pulser(2.0, 0.8) : 0.6;
        } else {
            PDA_LocalButton[id].alpha = 1.0;
        }
    } else {
        if (PDA_LocalButton[id].type != "modpack" && PDA_LocalButton[id].type != "tab" && PDA_LocalButton[id].type != "armor") {
            PDA_LocalButton[id].alpha = (PDA_LocalButton[id].state == button_hovered) ? pulser(2.0, 0.8) : 0.6;
        }
        if (PDA_LocalButton[id].type == "armor" && PDA_LocalButton[id].state == button_hovered) {
            PDA_LocalButton[id].alpha = 1.0;
        }
    }

    int warningID = id - 50;
    int newColor = CR_UNTRANSLATED;
    if (warningID < 0) warningID = 0;
    if (warningID > 4) warningID = 4;
    if (PDA_LocalButton[id].type == "beast") {
        newColor = PDA_LocalButton[id].textColor;
        if (PDA_Local.newEntry[warningID]) newColor = CR_GOLD;
    }

    fixed xlabeloff = (strcmp(PDA_LocalButton[id].graphic, "PTAB") == 0) ? 4.0 : 0.0;
    fixed ylabeloff = (strcmp(PDA_LocalButton[id].graphic, "PTAB") == 0) ? 3.0 : 0.0;

    PrintSpriteAlpha(PDA_LocalButton[id].graphic, PDA_LocalButton[id].graphicID, PDA_LocalButton[id].graphicX, PDA_LocalButton[id].graphicY, 0.0, PDA_LocalButton[id].alpha);
    // PrintSprite(PDA_LocalButton[id].graphic, PDA_LocalButton[id].graphicID, PDA_LocalButton[id].graphicX, PDA_LocalButton[id].graphicY, 0.1);

    SetFont(PDA_LocalButton[id].textFont);
    HudMessage(s:PDA_LocalButton[id].label; PDA_LocalButton[id].textFlags, PDA_LocalButton[id].textID, newColor, PDA_LocalButton[id].textX, PDA_LocalButton[id].textY, 1.0, PDA_LocalButton[id].alpha);

    if (PDA_LocalButton[id].type == "beast") {
        if (PDA_Local.newEntry[warningID] && PDA_Local.page == 1) {
            HudMessage(s:"New entry!\n"; 
                HUDMSG_ALPHA, id + 5, CR_GREEN, thisButton.textX + thisButton.width - 10.0, thisButton.textY - 6.0, 0.0, pulser(2.0, 0.8)
            );
        }
    }

    if (clear) {
        PrintSpriteAlpha(" ", PDA_LocalButton[id].graphicID, PDA_LocalButton[id].graphicX, PDA_LocalButton[id].graphicY, 0.0, 0.0);
        HudMessage(s:" "; PDA_LocalButton[id].textFlags, PDA_LocalButton[id].textID, newColor, PDA_LocalButton[id].textX, PDA_LocalButton[id].textY, 1.0, 0.0);
        HudMessage(s:" "; HUDMSG_ALPHA, id + 5, CR_GREEN, thisButton.textX + thisButton.width - 10.0, thisButton.textY - 6.0, 0.0, 0.0);
    }
}

function void PDA_HandleHeader(void) {
    // Handle the per-screen tabs + any header data
    PDA_SetupHeaderBounds();
    
    PDA_ButtonHandler(PDA_TAB_BUTTONS_START    , 0, 0, "", true, true);
    PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 1, 0, 0, "", true, true);
    PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 2, 0, 0, "", true, true);
    PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 3, 0, 0, "", true, true);
    PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 4, 0, 0, "", true, true);

    switch (PDA_Local.category) {
        case PDA_MENU:
            PDA_Local.pagemax = 1;

            PDA_HEADER_STR = "PDA_MENU_HEADER"; PDA_HEADER_X = 0;
            break;

        case PDA_CLASSES:
            PDA_Local.pagemax = 2;

            PDA_LocalButton[PDA_TAB_BUTTONS_START    ] = PDA_CreateTab(PDA_TAB_BUTTONS_START    , "1", "PTAB", PDA_TAB_START_X  , PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START    , true, 1, "", false, false);
            
            PDA_LocalButton[PDA_TAB_BUTTONS_START + 1] = PDA_CreateTab(PDA_TAB_BUTTONS_START + 1, "2", "PTAB", PDA_TAB_NEXT_X(1), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 1, true, 2, "", false, false);

            switch(PDA_Local.page)
            {
                case CLASSES_PAGE_PERKS: PDA_HEADER_STR = "PDA_CLASS_HEADER1"; PDA_HEADER_X = 5; break;
                case CLASSES_PAGE_STORY: PDA_HEADER_STR = "PDA_CLASS_HEADER2"; PDA_HEADER_X = 0; break;
            }
            break;

        case PDA_WEAPONS:
            PDA_Local.pagemax = 3;

            PDA_LocalButton[PDA_TAB_BUTTONS_START    ] = PDA_CreateTab(PDA_TAB_BUTTONS_START    , "1", "PTAB", PDA_TAB_START_X  , PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START    , true, 1, "", false, false);
            
            PDA_LocalButton[PDA_TAB_BUTTONS_START + 1] = PDA_CreateTab(PDA_TAB_BUTTONS_START + 1, "2", "PTAB", PDA_TAB_NEXT_X(1), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 1, true, 2, "", false, false);
            
            PDA_LocalButton[PDA_TAB_BUTTONS_START + 2] = PDA_CreateTab(PDA_TAB_BUTTONS_START + 2, "3", "PTAB", PDA_TAB_NEXT_X(2), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 2, true, 3, "", false, false);

            switch (PDA_Local.page) {
                case WEAPON_PAGE_STORY:
                    PDA_HEADER_STR = "PDA_WEAPON_HEADER"; PDA_HEADER_X = 0;
                    break;
                case WEAPON_PAGE_MODPACK_EFFECTS:
                    PDA_HEADER_STR = "PDA_MODPACK_HEADER"; PDA_HEADER_X = -10;
                    break;
                case WEAPON_PAGE_ARTIFACT_EFFECTS:
                    PDA_HEADER_STR = "PDA_DEMONARTIFACT_HEADER"; PDA_HEADER_X = -20;
                    break;
            }
            break;
            
        case PDA_BESTIARY:
            PDA_Local.pagemax = 6;

            switch (PDA_Local.page) {
                case 1: PDA_HEADER_STR = "PDA_BESTIARY_HEADER";    PDA_HEADER_X =   0;                                  break;
                case 2: PDA_HEADER_STR = "PDA_BESTIARY_HEADER_UV"; PDA_HEADER_X = -40; beast_info[2] = CR_WHITE;     break;
                case 3: PDA_HEADER_STR = "PDA_BESTIARY_HEADER_NM"; PDA_HEADER_X = -30; beast_info[2] = CR_BRICK;     break;
                case 4: PDA_HEADER_STR = "PDA_BESTIARY_HEADER_TP"; PDA_HEADER_X = -50; beast_info[2] = CR_LIGHTBLUE; break;
                case 5: PDA_HEADER_STR = "PDA_BESTIARY_HEADER_AR"; PDA_HEADER_X = -40; beast_info[2] = CR_GOLD;      break;
                case 6: PDA_HEADER_STR = "PDA_BESTIARY_HEADER_SP"; PDA_HEADER_X = -20; beast_info[2] = CR_PURPLE;    break;
            }
            break;
        case PDA_ARMORS:
            PDA_Local.pagemax = 2;

            PDA_LocalButton[PDA_TAB_BUTTONS_START    ] = PDA_CreateTab(PDA_TAB_BUTTONS_START    , "1", "PTAB", PDA_TAB_START_X  , PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START    , true, 1, "", false, false);
            
            PDA_LocalButton[PDA_TAB_BUTTONS_START + 1] = PDA_CreateTab(PDA_TAB_BUTTONS_START + 1, "2", "PTAB", PDA_TAB_NEXT_X(1), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 1, true, 2, "", false, false);

            switch (PDA_Local.page) {
                case EQUIPMENT_PAGE_ONHAND:
                    PDA_HEADER_STR = "PDA_ARMOR_HEADER1"; PDA_HEADER_X = -20;
                    break;
                case EQUIPMENT_PAGE_INFO:
                    PDA_HEADER_STR = "PDA_ARMOR_HEADER2"; PDA_HEADER_X = -15;
                    break;
            }
            break;

        case PDA_ASSEMBLIES:
            PDA_Local.pagemax = 3;
            switch (PDA_Local.page) {
                case ASSEMBLY_PAGE_BASIC:
                    PDA_HEADER_STR = "PDA_ASSEMBLY_BASIC_NAME"; PDA_HEADER_X = -30;
                    break;
                case ASSEMBLY_PAGE_ADVANCED:
                    PDA_HEADER_STR = "PDA_ASSEMBLY_ADVANCED_NAME"; PDA_HEADER_X = -30;
                    break;
                case ASSEMBLY_PAGE_MASTER:
                    PDA_HEADER_STR = "PDA_ASSEMBLY_MASTER_NAME"; PDA_HEADER_X = -30;
                    break;
            }
            
            PDA_LocalButton[PDA_TAB_BUTTONS_START    ] = PDA_CreateTab(PDA_TAB_BUTTONS_START    , "1", "PTAB", PDA_TAB_START_X  , PDA_TAB_Y, 8, 6);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START    , true, 1, "", false, false);

            PDA_LocalButton[PDA_TAB_BUTTONS_START + 1] = PDA_CreateTab(PDA_TAB_BUTTONS_START + 1, "2", "PTAB", PDA_TAB_NEXT_X(1), PDA_TAB_Y, 8, 6);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 1, true, 2, "", false, false);

            PDA_LocalButton[PDA_TAB_BUTTONS_START + 2] = PDA_CreateTab(PDA_TAB_BUTTONS_START + 2, "3", "PTAB", PDA_TAB_NEXT_X(2), PDA_TAB_Y, 8, 6);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 2, true, 3, "", false, false);
            break;

        case PDA_HELP:
            PDA_Local.pagemax = 2;

            switch(PDA_Local.page)
            {
                case 1: PDA_HEADER_STR = "PDA_PDAHELP_HEADER"; PDA_HEADER_X = -10; break;
                case 2: PDA_HEADER_STR = "PDA_DRLAHELP_HEADER"; PDA_HEADER_X = -40; break;
            }

            PDAButton HELP_TAB_1 = PDA_CreateTab(PDA_TAB_BUTTONS_START    , "1", "PTAB", PDA_TAB_START_X  , PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START    , true, 1, "", false, false);

            PDAButton HELP_TAB_2 = PDA_CreateTab(PDA_TAB_BUTTONS_START + 1, "2", "PTAB", PDA_TAB_NEXT_X(1), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
            PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 1, true, 2, "", false, false);
            break;
        case PDA_MISC:
            PDA_Local.pagemax = 1;

            PDA_HEADER_STR = "PDA_MISC_HEADER"; PDA_HEADER_X = 10;
            break;

        case PDA_ITEMS:
            if (GetCvar("DRLA_specialstarts") != 2)
            {
                PDA_Local.pagemax = DRLA_GROUPQUANTITY;

                PDA_LocalButton[PDA_TAB_BUTTONS_START    ] = PDA_CreateTab(PDA_TAB_BUTTONS_START    , "1" , "PTAB", PDA_TAB_START_X  , PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
                PDA_ButtonHandler(PDA_TAB_BUTTONS_START    , true, 1, "", false, false);

                PDA_LocalButton[PDA_TAB_BUTTONS_START + 1] = PDA_CreateTab(PDA_TAB_BUTTONS_START + 1, "2" , "PTAB", PDA_TAB_NEXT_X(1), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
                PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 1, true, 2, "", false, false);

                PDA_LocalButton[PDA_TAB_BUTTONS_START + 2] = PDA_CreateTab(PDA_TAB_BUTTONS_START + 2, "3" , "PTAB", PDA_TAB_NEXT_X(2), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
                PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 2, true, 3, "", false, false);

                PDA_LocalButton[PDA_TAB_BUTTONS_START + 3] = PDA_CreateTab(PDA_TAB_BUTTONS_START + 3, "4" , "PTAB", PDA_TAB_NEXT_X(3), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
                PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 3, true, 4, "", false, false);

                PDA_LocalButton[PDA_TAB_BUTTONS_START + 4] = PDA_CreateTab(PDA_TAB_BUTTONS_START + 4, "5" , "PTAB", PDA_TAB_NEXT_X(4), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
                PDA_ButtonHandler(PDA_TAB_BUTTONS_START + 4, true, 5, "", false, false);
            }
            break;
        case PDA_ASSEMBLY_DETAIL:
            PDA_Local.pagemax = 1;

            PDA_HEADER_STR = "PDA_DETAILEDASSEMBLY_HEADER"; PDA_HEADER_X = -30;
            break;
        case PDA_BESTIARY_DETAIL:
            PDA_Local.pagemax = 1;

            PDA_HEADER_STR = "PDA_DETAILEDBEAST_HEADER"; PDA_HEADER_X = -30;
            break;
        case PDA_CREDITS:
            PDA_Local.pagemax = 1;

            PDA_HEADER_STR = "PDA_CREDITS_HEADER"; PDA_HEADER_X = 0;
            break;
    }

    // Then print the header
    PDA_DefaultFont();
    SetHudSize(320,200,0);
    HudMessage(l:PDA_HEADER_STR; HUDMSG_PLAIN, PDA_INFOTOPID, CR_GREEN, PDA_SCREEN_X + 100.0 + PDA_HEADER_X + X_LEFT_EDGE, PDA_SCREEN_Y + 2.0 + Y_TOP_EDGE, 0.0);
    PDA_SetupScreenBounds();
}

// EOF