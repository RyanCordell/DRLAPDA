PDA_Local.pagemax = 3;

PDA_Wipe();

str classperkdisplayed = "\n",
    weaponperkdisplayed = "\n";
int perkoffset = 1;

switch (PDA_Local.page)
{
case 1:
    PDA_PrintHeader("PDA_WEAPON_HEADER", -50);
    break;
case 2:
    PDA_PrintHeader("PDA_MODPACK_HEADER", -20);
    break;
case 3:
    PDA_PrintHeader("PDA_DEMONARTIFACT_HEADER", -40);
    break;
}

PDAButton P1 = PDA_CreateTab(PDA_TAB_BUTTONS_START    , "1", "PTAB", PDA_TAB_START_X  , PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
               PDA_InitButton(P1, true, 1, "", false);

PDAButton P2 = PDA_CreateTab(PDA_TAB_BUTTONS_START + 1, "2", "PTAB", PDA_TAB_NEXT_X(1), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
               PDA_InitButton(P2, true, 2, "", false);

PDAButton P3 = PDA_CreateTab(PDA_TAB_BUTTONS_START + 2, "3", "PTAB", PDA_TAB_NEXT_X(2), PDA_TAB_Y,  PDA_TAB_W, PDA_TAB_H);
               PDA_InitButton(P3, true, 3, "", false);

PDA_SetupScreenBounds();
PDA_DefaultFont();

#define WEAPON_PAGE_STORY 1
#define WEAPON_PAGE_MODPACK_EFFECTS 2
#define WEAPON_PAGE_ARTIFACT_EFFECTS 3

str currentWeapon = GetWeapon();
str trimmedCurrentWeapon = StrTrim(currentWeapon, 2, 0);
if (stricmp(CheckInventory(currentWeapon), "None") != 0) {
    int PDA_Weapon_Name_Printer = StrParam("PDA_WEAPON_%s:_NAME", trimmedCurrentWeapon),
        PDA_Weapon_Desc_Printer = StrParam("PDA_WEAPON_%s:_DESC", trimmedCurrentWeapon);

    int PDA_Weapon_DualName_Printer = StrParam("PDA_WEAPON_%s:DEMONARTIFACTS_NAME", trimmedCurrentWeapon),
        PDA_Weapon_DualDesc_Printer = StrParam("PDA_WEAPON_%s:DEMONARTIFACTS_DESC", trimmedCurrentWeapon);

    int PDA_Weapon_Bulk_Quantity      = CheckInventory(StrParam("%s:BulkMod", currentWeapon)),
        PDA_Weapon_Power_Quantity     = CheckInventory(StrParam("%s:PowerMod", currentWeapon)),
        PDA_Weapon_Agility_Quantity   = CheckInventory(StrParam("%s:AgilityMod", currentWeapon)),
        PDA_Weapon_Technical_Quantity = CheckInventory(StrParam("%s:TechnicalMod", currentWeapon)),
        PDA_Weapon_Sniper_Quantity    = CheckInventory(StrParam("%s:SniperMod", currentWeapon)),
        PDA_Weapon_Firestorm_Quantity = CheckInventory(StrParam("%s:FirestormMod", currentWeapon)),
        PDA_Weapon_Nano_Quantity      = CheckInventory(StrParam("%s:NanoMod", currentWeapon)),
        PDA_Weapon_Artifact_Quantity  = CheckInventory(StrParam("%s:DemonArtifacts", currentWeapon));

    bool PDA_IsNotDemonic = false;
         PDA_IsNotDemonic = !CheckInventory("RLDemonicWeaponToken");

    if (PDA_Local.page == WEAPON_PAGE_STORY) {
        //PDA_SetScrollWindow(-140);
        PDA_SetScrollLimit(-50);

        classperkdisplayed  = StrParam("> \c[Yellow]%l:", "PDA_WEAPON_PERKUNAVAILABLE");
        bool canDisassemble = (GetActorClass(0) == "DoomRLTechnician" && !CheckInventory("RLStandardWeaponToken"));
        bool hasArtifacts   = CheckInventory(StrParam("%s:DemonArtifacts", currentWeapon));

        // Checks for player perks that influence weapons
        for (int perkIndex = 0; perkIndex < DRLA_WEAPONPERKMAX; perkIndex++) {
            if (CheckInventory(DRLA_WeaponPerkList[perkIndex][0]) && CheckInventory(DRLA_WeaponPerkList[perkIndex][2])) {
                classperkdisplayed = strParam("> \c[Yellow]%s:", DRLA_WeaponPerkList[perkIndex][1]);
            }
        }
        // Checks for unique weapon + armor set perks
        // I should get a better name for this loop's max at some point..
        for (int setPerkIndex = 0; setPerkIndex < DRLA_NUCLEARMAX; setPerkIndex++) {
            if (CheckInventory(DRLA_WeaponSetList[setPerkIndex][0]) && (currentWeapon == DRLA_NuclearCheckList[setPerkIndex])) {
                weaponperkdisplayed = strParam("> \c[Yellow]%s:", DRLA_WeaponSetList[0][1]);
            }
            if (CheckInventory("RLCerberusSetBonusActive") && (currentWeapon == DRLA_TristarCheckList[setPerkIndex])) {
                weaponperkdisplayed = strParam("> \c[Yellow]%s:", DRLA_WeaponSetList[1][1]);
            }
        }

        HudMessageParallax(
            StrParam(
                "%s:" // Tech perk
                "%s:" // Non-Tech Class perk
                "\n"
                "%s:" // Weapon perk
                "%l:\n"
                "\c-%l:\n",
                (canDisassemble) ? strParam("> \c[Yellow]%s:", DRLA_WeaponPerkList[2][1]) : "",
                (!canDisassemble) ? classperkdisplayed : "",
                weaponperkdisplayed,
                (hasArtifacts) ? PDA_Weapon_DualName_Printer : PDA_Weapon_Name_Printer,
                (hasArtifacts) ? PDA_Weapon_DualDesc_Printer : PDA_Weapon_Desc_Printer
            ),

            HUDMSG_PLAIN, PDA_INFOID, CR_UNTRANSLATED, 
            0.0, 
            20.0 + (20.0 * 1), 
            0, 1.0);
        
        PDAButton Goto2 = PDA_CreateButton(61, "Modpack Effects" , "TMODICON", 
            10.0, 
            20.0 + (20.0 * 4), 
            /*bw*/82, /*bh*/16, 
            /*gw*/16, /*gh*/19);
                          PDA_InitButton(Goto2, true, 2, "", false);

        PDAButton Goto3 = PDA_CreateButton(62, "Artifact Effects", "DMNAICON", 
            10.0, 
            20.0 + (20.0 * 5),
            82, 16, 
            16, 19);
                          PDA_InitButton(Goto3, true, 3, "", false);
    }

    if (PDA_Local.page == WEAPON_PAGE_MODPACK_EFFECTS) {
        // Every weapon and assembly tier has their own max amount of mod packs applicable. Set that up.
        PDA_EstablishModLimits();

        PDA_SetScrollLimit(-30);
        PDA_SetScrollArrows2(-30, PDA_SCREEN_WIDTH + 60.0, PDA_SCROLLABLE_HEIGHT + 90.0);

        PDAButton button[PDA_MODMAX - 1] = {'', '', '', '', '', '', ''};

        int playerHazMod[PDA_MODMAX] = { PDA_Weapon_Bulk_Quantity, PDA_Weapon_Power_Quantity, PDA_Weapon_Agility_Quantity, PDA_Weapon_Technical_Quantity, PDA_Weapon_Sniper_Quantity, PDA_Weapon_Firestorm_Quantity, PDA_Weapon_Nano_Quantity };
        
        // DisplayIcon(currentWeapon, PDA_ID, 0.5, 0.5, 0, 1);
        // HudMessageParallax("bert");
        // EndHudMessage(HUDMSG_PLAIN, PDA_INFOID, CR_UNTRANSLATED, 10.0 + X_LEFT_EDGE, NEW_RESOLUTION_Y + 20.0 + Y_TOP_EDGE + (20.0 * 1), 0);
        
        HudMessageParallax(
            StrParam("%l:\n"
            "[\c[LightBlue]%i:B \c[Red]%i:P \c[Green]%i:A \c[Yellow]%i:T \c[Purple]%i:S \c[Orange]%i:F \c[White]%i:N \cr%i:D\c-]"
            "\n\n"
            "%l:\c[Cyan]%i:",
            (PDA_IsNotDemonic) 
                ? (CheckInventory(strParam("%s:DemonArtifacts", currentWeapon)) ? PDA_Weapon_DualName_Printer : PDA_Weapon_Name_Printer) 
                : PDA_Weapon_Name_Printer,
            PDA_Weapon_Bulk_Quantity, PDA_Weapon_Power_Quantity, PDA_Weapon_Agility_Quantity, PDA_Weapon_Technical_Quantity,
            PDA_Weapon_Sniper_Quantity, PDA_Weapon_Firestorm_Quantity, PDA_Weapon_Nano_Quantity,
            (PDA_IsNotDemonic) ? 0 : PDA_Weapon_Artifact_Quantity,
            "PDA_MODPACK_MAXSUPPORTED",
            PDA_Local.maxmodlimit),

            HUDMSG_PLAIN, PDA_INFOID, CR_UNTRANSLATED, 
            /*x*/ 10.0 + X_LEFT_EDGE, 
            /*y*/ 20.0 + (20.0 * 1) + Y_TOP_EDGE, 
            0.0, 1.0
        );

        // I am so sorry.
        float modYOffset = 20.0;
        fixed modAlpha = 0.6;

        str weaponModsEntry = StrParam("%l:", StrParam("PDA_WEAPON_%s:_MODS", trimmedCurrentWeapon));
        str_split(StrParam("%l:", "PDA_SEPARATOR_CHARACTER"), weaponModsEntry);

        for (int modPack = PDA_MODMIN; modPack < PDA_MODMAX - 1; modPack++) {
            if (modPack < mi_sniper) modYOffset = 10.0 + X_LEFT_EDGE;
            else                     modYOffset = 12.0 + X_LEFT_EDGE;

            str selectedMod = StrParam("%s:MODICON", strMid(stringArray[modPack], 9, 1));

            modAlpha = 1;
            // modAlpha = 0.5;
            // if (playerHazMod[modPack] > 0) modAlpha = 1;
            
            #define modButton button[modPack]
            modButton = PDA_CreateModPackDisplay(modPack, selectedMod, 
                        /*x*/ 5.0 + X_LEFT_EDGE, /*y*/ 80.0 + (29.0 * modPack), 
                        16, 24, modAlpha);
                        PDA_InitButton(modButton, true, WEAPON_PAGE_MODPACK_EFFECTS, '', true);

            SetFont(modButton.textFont);
            HudMessageParallax(
                StrParam("%l:", stringArray[modPack]), 
                modButton.textFlags, PDA_ASSEMBLYIDRANGE + modPack, CR_UNTRANSLATED, 
                modButton.finalX, 80.0 + (29.0 * modPack) + Y_TOP_EDGE,
                0.0, modAlpha);
        }
        
        PDA_DefaultFont();
    }
    if (PDA_Local.page == WEAPON_PAGE_ARTIFACT_EFFECTS) {
        PDA_SetScrollLimit(-80);
        PDA_SetScrollArrows2(-80, PDA_SCREEN_WIDTH + 50.0, PDA_SCROLLABLE_HEIGHT + 90.0);

        HudMessage("\cf%l:\c-\n", "PDA_DEMONARTIFACTS_NOTSUPPORTED"; HUDMSG_PLAIN, PDA_INFOID, CR_UNTRANSLATED, 
        PDA_SCREEN_X + 10.0 + X_LEFT_EDGE, PDA_Local.scrollingy + 20.0 + (20.0 * 1) + Y_TOP_EDGE, 0);

        if (!PDA_IsNotDemonic) {
            HudMessage("%l:\n[\c[LightBlue]%i:B \c[Red]%i:P \c[Green]%i:A \c[Yellow]%i:T \c[Purple]%i:S \c[Orange]%i:F \c[White]%i:N \cr%i:D\c-]"
                   "\n\n",
                   (PDA_IsNotDemonic) ? 
                    (CheckInventory(strParam("%s:DemonArtifacts", currentWeapon)) ? 
                        PDA_Weapon_DualName_Printer 
                        : PDA_Weapon_Name_Printer) 
                    : PDA_Weapon_Name_Printer,
                   PDA_Weapon_Bulk_Quantity, PDA_Weapon_Power_Quantity, PDA_Weapon_Agility_Quantity, PDA_Weapon_Technical_Quantity,
                   PDA_Weapon_Sniper_Quantity, PDA_Weapon_Firestorm_Quantity, PDA_Weapon_Nano_Quantity,
                   (PDA_IsNotDemonic) ? 0 : PDA_Weapon_Artifact_Quantity;
                   HUDMSG_PLAIN, PDA_INFOID, CR_UNTRANSLATED, 
                   PDA_SCREEN_X + 10.0 + X_LEFT_EDGE, (int)(PDA_Local.scrollingy * NEW_RESOLUTION_Y) + 20.0 + (20.0 * 1) + Y_TOP_EDGE, 0);
                
            float artifactsY = 60.0;

            if (PDA_Weapon_Artifact_Quantity > 0) {
                switch (PDA_Weapon_Artifact_Quantity) {
                    case 1:
                        HudMessage("\cf%l:\c-\n%l:\n\n",
                                "PDA_DEMONARTIFACTS_ONE",
                                StrParam("PDA_ARTIFACT_%s:_ONE", trimmedCurrentWeapon);
                                HUDMSG_PLAIN, PDA_INFO2ID, CR_UNTRANSLATED, PDA_SCREEN_X + 10.0 + X_LEFT_EDGE, PDA_Local.scrollingy + 10.0 + (artifactsY * 1) + Y_TOP_EDGE, 0);
                        break;
                    case 2:
                        HudMessage("\cf%l:\c-\n%l:\n\n\c[Red]%l:\c-\n%l:\n\n",
                                "PDA_DEMONARTIFACTS_TWO",
                                StrParam("PDA_ARTIFACT_%s:_TWO", trimmedCurrentWeapon),
                                "PDA_DEMONARTIFACTS_ONE",
                                StrParam("PDA_ARTIFACT_%s:_ONE", trimmedCurrentWeapon);
                                HUDMSG_PLAIN, PDA_INFO2ID, CR_UNTRANSLATED, PDA_SCREEN_X + 10.0 + X_LEFT_EDGE, PDA_Local.scrollingy + 10.0 + (artifactsY * 1) + Y_TOP_EDGE, 0);
                        break;
                    case 3:
                        HudMessage("\cf%l:\c-\n%l:\n\n\c[Red]%l:\c-\n%l:\n\n\c[Red]%l:\c-\n%l:\n\n",
                                "PDA_DEMONARTIFACTS_THREE",
                                StrParam("PDA_ARTIFACT_%s:_THREE", trimmedCurrentWeapon),
                                "PDA_DEMONARTIFACTS_TWO",
                                StrParam("PDA_ARTIFACT_%s:_TWO", trimmedCurrentWeapon),
                                "PDA_DEMONARTIFACTS_ONE",
                                StrParam("PDA_ARTIFACT_%s:_ONE", trimmedCurrentWeapon);
                                HUDMSG_PLAIN, PDA_INFO2ID, CR_UNTRANSLATED, PDA_SCREEN_X + 10.0 + X_LEFT_EDGE, PDA_Local.scrollingy + 10.0 + (artifactsY * 1) + Y_TOP_EDGE, 0);
                        break;
                }
            }
            else {
                HudMessage("\c[Red]%l:\c-\n",
                            "PDA_DEMONARTIFACTS_ZERO";
                            HUDMSG_PLAIN, PDA_INFO2ID, CR_UNTRANSLATED, PDA_SCREEN_X + 10.0 + X_LEFT_EDGE, PDA_Local.scrollingy + 10.0 + (artifactsY * 1) + Y_TOP_EDGE, 0);
            }
        }
        // for (int weaponIndex = 0; weaponIndex < DRLA_DEMONWEAPONMAX; weaponIndex++) {
        //     if (StrCmp(currentWeapon, DRLA_ArtifactEffectList[weaponIndex][0]) == 0) {
            // }
        // }
    }
}

PDA_UnsetScrollWindow();